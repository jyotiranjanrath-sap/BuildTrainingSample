"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PathUtil = exports.APPLICATION_FILE_NAME = exports.MDKFolderTypeMapping = exports.MDKFileTypeMapping = exports.MDKFileType = void 0;
const _ = require("lodash");
const path = require("path");
const vscode_uri_1 = require("vscode-uri");
const utils= require('../../../utils');
var MDKFileType;
(function (MDKFileType) {
    MDKFileType[MDKFileType["Action"] = 0] = "Action";
    MDKFileType[MDKFileType["App"] = 1] = "App";
    MDKFileType[MDKFileType["CIM"] = 2] = "CIM";
    MDKFileType[MDKFileType["Global"] = 3] = "Global";
    MDKFileType[MDKFileType["Page"] = 4] = "Page";
    MDKFileType[MDKFileType["Rule"] = 5] = "Rule";
    MDKFileType[MDKFileType["Service"] = 6] = "Service";
    MDKFileType[MDKFileType["Style"] = 7] = "Style";
    MDKFileType[MDKFileType["i18n"] = 8] = "i18n";
    MDKFileType[MDKFileType["Image"] = 9] = "Image";
    MDKFileType[MDKFileType["Extension"] = 10] = "Extension";
    MDKFileType[MDKFileType["ExtensionMetadata"] = 11] = "ExtensionMetadata";
    MDKFileType[MDKFileType["Fragment"] = 12] = "Fragment";
    MDKFileType[MDKFileType["MergeMap"] = 13] = "MergeMap";
})(MDKFileType = exports.MDKFileType || (exports.MDKFileType = {}));
exports.MDKFileTypeMapping = new Object({
    "action": MDKFileType.Action,
    "app": MDKFileType.App,
    "cim": MDKFileType.CIM,
    "css": MDKFileType.Style,
    "global": MDKFileType.Global,
    "js": MDKFileType.Rule,
    "less": MDKFileType.Style,
    "nss": MDKFileType.Style,
    "page": MDKFileType.Page,
    "properties": MDKFileType.i18n,
    "service": MDKFileType.Service,
    "png": MDKFileType.Image,
    "pdf": MDKFileType.Image,
    "jpg": MDKFileType.Image,
    "jpeg": MDKFileType.Image,
    "gif": MDKFileType.Image,
    "ico": MDKFileType.Image,
    "bmp": MDKFileType.Image,
    "ts": MDKFileType.Extension,
    "extension": MDKFileType.ExtensionMetadata,
    "fragment": MDKFileType.Fragment,
    "mergemap": MDKFileType.MergeMap
});
exports.MDKFolderTypeMapping = new Object({
    "Actions": MDKFileType.Action,
    "Globals": MDKFileType.Global,
    "Pages": MDKFileType.Page,
    "Rules": MDKFileType.Rule,
    "Services": MDKFileType.Service,
    "i18n": MDKFileType.i18n,
    "Styles": MDKFileType.Style,
    "Images": MDKFileType.Image,
    "Extensions": MDKFileType.Extension,
    "Fragments": MDKFileType.Fragment
});
exports.APPLICATION_FILE_NAME = "Application.app";
var PathUtil;
(function (PathUtil) {
    /**
     * e.g.
     * in: /MDKDevApp/Pages/SeamDevApp.page
     * out: MDKDevApp
     */
    function parseApplicationName(fileReference) {
        let applicationName = "";
        if (fileReference) {
            var segs = fileReference.split('/');
            if (segs.length > 1 && segs[0] === "") {
                applicationName = segs[1];
            }
        }
        return applicationName;
    }
    PathUtil.parseApplicationName = parseApplicationName;
    /**
     * e.g.
     * in:
     * /MDKDevApp/Pages/SeamDevApp.page, /SAM/src/metadata/definitions
     * out:
     * /SAM/src/metadata/definitions/Pages/SeamDevApp.page
     */
    function toFullPath(fileReference, sBasePath) {
        sBasePath = sBasePath || "";
        let fullPath = "";
        if (fileReference) {
            var segs = fileReference.split('/');
            if (segs.length > 1 && segs[0] === "") {
                segs.shift();
                segs[0] = sBasePath;
                fullPath = segs.join('/');
            }
        }
        return path.resolve(fullPath);
    }
    PathUtil.toFullPath = toFullPath;
    /**
     * e.g.
     * in:
     * /SAM/src/metadata/definitions/Pages/SeamDevApp.page
     * out:
     * /MDKDevApp/Pages/SeamDevApp.page
     */
    function toFileReference(fullPath, appName, appBasePath) {
        if (fullPath && appName && appBasePath && fullPath.indexOf(appBasePath) === 0) {
            let remainingPath = path.sep === '/' ? fullPath.substr(appBasePath.length) : fullPath.substr(appBasePath.length).replace(/\\/g, '/');
            return '/' + appName + remainingPath;
        }
        else {
            return fullPath;
        }
    }
    PathUtil.toFileReference = toFileReference;
    /**
     * check whether the passing in filePath is a mdk file type, including the path pattern check
     *
     * e.g.
     * in:
     * fullpath: /SAM/src/metadata/definitions/Application.app (on MacOS)
     * 			 C:\SAM\sr\metadata\definitions\Application.app (on Windows)
     * or
     * filereference: /MDKDevApp/Pages/SeamDevApp.page (on MacOS)
     * 				  C:\MDKDevApp\Pages\SeamDevApp.page (on Windows)
     * out:
     * true
     */
    function isMDKFile(filePath) {
        if (!filePath) {
            return false;
        }
        else {
            filePath = filePath.replace(/\\/g, '/');
            let originalFilePath = filePath;
            filePath = filePath.toLowerCase();
            let fileExt = path.extname(filePath);
            if (fileExt) {
                fileExt = fileExt.substr(1);
                let fileType = exports.MDKFileTypeMapping[fileExt];
                if (fileType === MDKFileType.CIM) {
                    return true;
                }
                else if (fileType === MDKFileType.App) {
                    // return _.endsWith(originalFilePath, APPLICATION_FILE_NAME);
                    return true;
                }
                else if (fileType === MDKFileType.MergeMap) {
                    return true;
                }
                else if (fileType === MDKFileType.Action || fileType === MDKFileType.Global ||
                    fileType === MDKFileType.Page || fileType === MDKFileType.Rule ||
                    fileType === MDKFileType.Service || fileType === MDKFileType.Fragment ||
                    fileType === MDKFileType.ExtensionMetadata) {
                    let folderName = _.findKey(exports.MDKFolderTypeMapping, value => {
                        return value === fileType;
                    });
                    let fileExtension = _.findKey(exports.MDKFileTypeMapping, value => {
                        return value === fileType;
                    });
                    if (folderName && fileExtension) {
                        folderName = folderName.toLowerCase();
                        fileExtension = fileExtension.toLowerCase();
                    }
                    let regExp = new RegExp(`${folderName}\/.+\.${fileExtension}$`);
                    return regExp.test(filePath);
                }
                else if (fileType === MDKFileType.Style) {
                    let cssRegExp = new RegExp(`styles\/.+\.css`);
                    let nssRegExp = new RegExp(`styles\/.+\.nss`);
                    let lessRegExp = new RegExp(`styles\/.+\.less`);
                    return cssRegExp.test(filePath) || nssRegExp.test(filePath) || lessRegExp.test(filePath);
                }
                else if (fileType === MDKFileType.i18n) {
                    let i18nRegExp = new RegExp(`i18n\/.+\.properties`);
                    return i18nRegExp.test(filePath);
                }
                else if (fileType === MDKFileType.Image) {
                    let imageRegExp = new RegExp(`images\/.+\..+`);
                    return imageRegExp.test(filePath);
                }
                else {
                    return false;
                }
            }
            else {
                return false;
            }
        }
    }
    PathUtil.isMDKFile = isMDKFile;
    /**
     * e.g.
     * in:
     * /SAM/src/metadata/definitions/Application.app
     * out:
     * MDKFileType.App
     */
    function getMDKFileType(filePath) {
        if (filePath) {
            let fileExt = path.extname(filePath).toLowerCase();
            if (fileExt) {
                fileExt = fileExt.substr(1);
                return exports.MDKFileTypeMapping[fileExt];
            }
        }
    }
    PathUtil.getMDKFileType = getMDKFileType;
    /**
     * e.g
     * in:
     * $(PLT, '/MDKApplication/Globals/NewGlobalstring.global', '<value for Web>',)
     * out:
     * /MDKApplication/Globals/NewGlobalstring.global (based on the offset)
     */
    function parseFileReference(value, position) {
        if (value.startsWith("$(")) {
            let aNode = value.trim().split(',');
            let prefix = aNode[0].length;
            let length1 = aNode[1].length;
            let length2 = 0;
            if (aNode.length > 2) {
                length2 = aNode[2].length;
            }
            if (position > prefix + length1 + length2 + 3) {
                return aNode[3].trim().replace(/['")]/g, '');
            }
            else if (position > prefix + length1 + 2) {
                return aNode[2].trim().replace(/['")]/g, '');
            }
            else if (position > prefix + 1) {
                return aNode[1].trim().replace(/['")]/g, '');
            }
            else {
                return -1;
            }
        }
        else {
            return -1;
        }
    }
    PathUtil.parseFileReference = parseFileReference;
    /**
     * e.g.
     * in:
     * /SAM/src/metadata/definitions
     * out:
     * /SAM/src/metadata/definitions/Application.app
     */
    function buildApplicationPath(appBasePath) {
        return path.join(appBasePath, exports.APPLICATION_FILE_NAME);
    }
    PathUtil.buildApplicationPath = buildApplicationPath;
    /**
     * e.g.
     * in:
     * MDKFileType.Action
     * out:
     * [ action ]
     *
     * or
     *
     * in:
     * MDKFileType.Style
     * out:
     * [ css, nss, less ]
     */
    function getFileExtensionsFromType(fileType) {
        return _.keys(_.pickBy(exports.MDKFileTypeMapping, (mdkFileType) => {
            return mdkFileType === fileType;
        }));
    }
    PathUtil.getFileExtensionsFromType = getFileExtensionsFromType;
    /**
     * e.g.
     * in:
     * MDKFileType.Action
     * out:
     * Actions
     */
    function getFileFolder(fileType) {
        return _.findKey(exports.MDKFolderTypeMapping, (value) => {
            return value === fileType;
        });
    }
    PathUtil.getFileFolder = getFileFolder;
    /**
     * e.g.
     * in:
     * MDKFileType.Action
     * out:
     * Action
     */
    function getFileTypeName(fileType) {
        return MDKFileType[fileType].toString();
    }
    PathUtil.getFileTypeName = getFileTypeName;
    /**
     * e.g.
     * in:
     * /SAM/src/metadata/definitions/Pages/SeamDevApp.page
     * out:
     * SeamDevApp
     */
    function getFileShortName(fullPath) {
        return path.basename(fullPath, path.extname(fullPath));
    }
    PathUtil.getFileShortName = getFileShortName;
    /**
     * Validate the file name
     */
    function validateFileName(fileType, fileName) {
        let allowedFileNames = /^[a-zA-Z_]+([a-zA-Z0-9\\_]+)*?$/;
        if (fileType === MDKFileType.i18n) {
            allowedFileNames = /^[a-zA-Z_]+([a-zA-Z0-9\\_-]+)*?$/;
        }
        if (fileType === MDKFileType.Style) {
            allowedFileNames = /^[a-zA-Z_]+([a-zA-Z0-9\\_.]+)*?$/;
        }
        return allowedFileNames.test(fileName);
    }
    PathUtil.validateFileName = validateFileName;
    /**
     * e.g.
     * in:
     * /SAM/src/metadata/definitions/Pages/Subfolder/SeamDevApp.page
     * out:
     * /SAM/src/metadata/definitions/Pages
     */
    function getFileTypePath(fileType, fullPath) {
        let fileFolder = path.sep + getFileFolder(fileType);
        return fullPath.substring(0, fullPath.indexOf(fileFolder) + fileFolder.length);
    }
    PathUtil.getFileTypePath = getFileTypePath;
    /**
     * return the versoning res file full path
     *
     * @param version schema version e.g '2.1' or '3.0'
     * @param name res file name, e.g. 'IClientAPI.d.ts'
     */
    function getResFullPath(version, name) {
        return path.join(utils.getRootPath(), "language-service", "res", "versions", version, name);
    }
    PathUtil.getResFullPath = getResFullPath;
    /**
     * return the i18n res file full path
     *
     * @param name res file name, e.g. 'Country.json'
     */
    function getI18nResFullPath(name) {
        return path.join(__dirname, "..", "..", "res", "i18n", name);
    }
    PathUtil.getI18nResFullPath = getI18nResFullPath;
    /**
     * Get the corresponding scheam name from the metadata file path. For example,
     * the schema name is Action.schema for the metadata createEntity.action
     * @param filePath metadata extension, e.g. the extension is 'action' in 'createEntity.action'
     */
    function getSchemaNameByMDKFile(filePath) {
        let extension = path.extname(filePath);
        if (extension) {
            extension = _.startCase(_.toLower(extension));
            if (extension === 'Cim') {
                extension = 'CIM';
            }
            else if (extension === "Mergemap") {
                if (path.basename(filePath) === "Application.mergemap") {
                    return "App.schema";
                }
                let fileType = null;
                let segments = path.resolve(filePath).split(path.sep);
                if (segments.length > 0) {
                    for (let i = segments.length - 1; i >= 0; i--) {
                        if (exports.MDKFolderTypeMapping.hasOwnProperty(segments[i])) {
                            fileType = exports.MDKFolderTypeMapping[segments[i]];
                            break;
                        }
                    }
                }
                if (fileType) {
                    for (const k in exports.MDKFileTypeMapping) {
                        if (exports.MDKFileTypeMapping.hasOwnProperty(k) && exports.MDKFileTypeMapping[k] === fileType) {
                            extension = _.startCase(k);
                            break;
                        }
                    }
                }
            }
            return extension + '.schema';
        }
    }
    PathUtil.getSchemaNameByMDKFile = getSchemaNameByMDKFile;
    /**
     * return the fsPath always
     * e.g. file:/SAM/src/metadata/definitions/Pages -> /SAM/src/metadata/definitions/Pages
     *
     * @param filePath fsPath or TextDocument's Uri
     */
    function tryParseUri(filePath) {
        let uriPrefix = 'file:';
        if (filePath.indexOf(uriPrefix) === 0) {
            return vscode_uri_1.default.parse(filePath).fsPath;
        }
        else {
            return filePath;
        }
    }
    PathUtil.tryParseUri = tryParseUri;
})(PathUtil = exports.PathUtil || (exports.PathUtil = {}));
//# sourceMappingURL=PathUtil.js.map