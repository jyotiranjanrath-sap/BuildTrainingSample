"use strict";
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLanguageService = exports.ValidationFacade = exports.TextDocument = exports.TargetPathValidator = exports.TargetPathCompletion = exports.StyleNameCompletion = exports.ServiceValidator = exports.SAPIconValidator = exports.SAPIconMap = exports.SAPIconCompletion = exports.QueryOptionValidator = exports.QueryOptionCompletion = exports.Position = exports.PlatformRiskValidator = exports.PathUtil = exports.OverrideActionValidator = exports.OverrideActionCompletion = exports.NameValidator = exports.MDKSchemaValidator = exports.MDKHover = exports.MDKFolderTypeMapping = exports.MDKFileTypeMapping = exports.MDKFileType = exports.MDKCompletion = exports.I18nValidator = exports.I18nSignatureHelp = exports.I18nDefinition = exports.I18nCompletion = exports.I18nCodeAction = exports.FileReferenceValidator = exports.FileReferenceDefinition = exports.FileReferenceCompletion = exports.FileReferenceCodeAction = exports.ExtractToCodeAction = exports.ExtensionPointValidator = exports.EntitySetValidator = exports.EntitySetCompletion = exports.DownloadStreamValidator = exports.DownloadStreamCompletion = exports.Diagnostic = exports.CompletionList = exports.CompletionItem = exports.CompletionFacade = exports.AddIgnoreProblemCodeAction = exports.APPLICATION_FILE_NAME = void 0;
const cache_1 = require("./cache");
const LanguageHelper_1 = require("./common/LanguageHelper");
const LogUtil_1 = require("./common/LogUtil");
const ODataMetadataProvider_1 = require("./common/ODataMetadataProvider");
const PathUtil_1 = require("./common/PathUtil");
Object.defineProperty(exports, "APPLICATION_FILE_NAME", { enumerable: true, get: function () { return PathUtil_1.APPLICATION_FILE_NAME; } });
Object.defineProperty(exports, "MDKFileType", { enumerable: true, get: function () { return PathUtil_1.MDKFileType; } });
Object.defineProperty(exports, "MDKFileTypeMapping", { enumerable: true, get: function () { return PathUtil_1.MDKFileTypeMapping; } });
Object.defineProperty(exports, "MDKFolderTypeMapping", { enumerable: true, get: function () { return PathUtil_1.MDKFolderTypeMapping; } });
Object.defineProperty(exports, "PathUtil", { enumerable: true, get: function () { return PathUtil_1.PathUtil; } });
const SAPIconMap_1 = require("./common/SAPIconMap");
Object.defineProperty(exports, "SAPIconMap", { enumerable: true, get: function () { return SAPIconMap_1.SAPIconMap; } });
const mdkLanguageTypes_1 = require("./mdkLanguageTypes");
Object.defineProperty(exports, "CompletionItem", { enumerable: true, get: function () { return mdkLanguageTypes_1.CompletionItem; } });
Object.defineProperty(exports, "CompletionList", { enumerable: true, get: function () { return mdkLanguageTypes_1.CompletionList; } });
Object.defineProperty(exports, "Diagnostic", { enumerable: true, get: function () { return mdkLanguageTypes_1.Diagnostic; } });
Object.defineProperty(exports, "Position", { enumerable: true, get: function () { return mdkLanguageTypes_1.Position; } });
Object.defineProperty(exports, "TextDocument", { enumerable: true, get: function () { return mdkLanguageTypes_1.TextDocument; } });
const AddIgnoreProblemCodeAction_1 = require("./service/codeaction/AddIgnoreProblemCodeAction");
Object.defineProperty(exports, "AddIgnoreProblemCodeAction", { enumerable: true, get: function () { return AddIgnoreProblemCodeAction_1.AddIgnoreProblemCodeAction; } });
const ExtractToCodeAction_1 = require("./service/codeaction/ExtractToCodeAction");
Object.defineProperty(exports, "ExtractToCodeAction", { enumerable: true, get: function () { return ExtractToCodeAction_1.ExtractToCodeAction; } });
const FileReferenceCodeAction_1 = require("./service/codeaction/FileReferenceCodeAction");
Object.defineProperty(exports, "FileReferenceCodeAction", { enumerable: true, get: function () { return FileReferenceCodeAction_1.FileReferenceCodeAction; } });
const I18nCodeAction_1 = require("./service/codeaction/I18nCodeAction");
Object.defineProperty(exports, "I18nCodeAction", { enumerable: true, get: function () { return I18nCodeAction_1.I18nCodeAction; } });
const CompletionFacade_1 = require("./service/completion/CompletionFacade");
Object.defineProperty(exports, "CompletionFacade", { enumerable: true, get: function () { return CompletionFacade_1.CompletionFacade; } });
const DownloadStreamCompletion_1 = require("./service/completion/DownloadStreamCompletion");
Object.defineProperty(exports, "DownloadStreamCompletion", { enumerable: true, get: function () { return DownloadStreamCompletion_1.DownloadStreamCompletion; } });
const EntitySetCompletion_1 = require("./service/completion/EntitySetCompletion");
Object.defineProperty(exports, "EntitySetCompletion", { enumerable: true, get: function () { return EntitySetCompletion_1.EntitySetCompletion; } });
const FileReferenceCompletion_1 = require("./service/completion/FileReferenceCompletion");
Object.defineProperty(exports, "FileReferenceCompletion", { enumerable: true, get: function () { return FileReferenceCompletion_1.FileReferenceCompletion; } });
const I18nCompletion_1 = require("./service/completion/I18nCompletion");
Object.defineProperty(exports, "I18nCompletion", { enumerable: true, get: function () { return I18nCompletion_1.I18nCompletion; } });
const MDKCompletion_1 = require("./service/completion/MDKCompletion");
Object.defineProperty(exports, "MDKCompletion", { enumerable: true, get: function () { return MDKCompletion_1.MDKCompletion; } });
const OverrideActionCompletion_1 = require("./service/completion/OverrideActionCompletion");
Object.defineProperty(exports, "OverrideActionCompletion", { enumerable: true, get: function () { return OverrideActionCompletion_1.OverrideActionCompletion; } });
const QueryOptionCompletion_1 = require("./service/completion/QueryOptionCompletion");
Object.defineProperty(exports, "QueryOptionCompletion", { enumerable: true, get: function () { return QueryOptionCompletion_1.QueryOptionCompletion; } });
const SAPIconCompletion_1 = require("./service/completion/SAPIconCompletion");
Object.defineProperty(exports, "SAPIconCompletion", { enumerable: true, get: function () { return SAPIconCompletion_1.SAPIconCompletion; } });
const StyleNameCompletion_1 = require("./service/completion/StyleNameCompletion");
Object.defineProperty(exports, "StyleNameCompletion", { enumerable: true, get: function () { return StyleNameCompletion_1.StyleNameCompletion; } });
const TargetPathCompletion_1 = require("./service/completion/TargetPathCompletion");
Object.defineProperty(exports, "TargetPathCompletion", { enumerable: true, get: function () { return TargetPathCompletion_1.TargetPathCompletion; } });
const FileReferenceDefinition_1 = require("./service/definition/FileReferenceDefinition");
Object.defineProperty(exports, "FileReferenceDefinition", { enumerable: true, get: function () { return FileReferenceDefinition_1.FileReferenceDefinition; } });
const I18nDefinition_1 = require("./service/definition/I18nDefinition");
Object.defineProperty(exports, "I18nDefinition", { enumerable: true, get: function () { return I18nDefinition_1.I18nDefinition; } });
const MDKHover_1 = require("./service/hover/MDKHover");
Object.defineProperty(exports, "MDKHover", { enumerable: true, get: function () { return MDKHover_1.MDKHover; } });
const SchemaProvider_1 = require("./service/schema/SchemaProvider");
const I18nSignatureHelp_1 = require("./service/signature/I18nSignatureHelp");
Object.defineProperty(exports, "I18nSignatureHelp", { enumerable: true, get: function () { return I18nSignatureHelp_1.I18nSignatureHelp; } });
const DownloadStreamValidator_1 = require("./service/validation/DownloadStreamValidator");
Object.defineProperty(exports, "DownloadStreamValidator", { enumerable: true, get: function () { return DownloadStreamValidator_1.DownloadStreamValidator; } });
const EntitySetValidator_1 = require("./service/validation/EntitySetValidator");
Object.defineProperty(exports, "EntitySetValidator", { enumerable: true, get: function () { return EntitySetValidator_1.EntitySetValidator; } });
const ExtensionPointValidator_1 = require("./service/validation/ExtensionPointValidator");
Object.defineProperty(exports, "ExtensionPointValidator", { enumerable: true, get: function () { return ExtensionPointValidator_1.ExtensionPointValidator; } });
const FileReferenceValidator_1 = require("./service/validation/FileReferenceValidator");
Object.defineProperty(exports, "FileReferenceValidator", { enumerable: true, get: function () { return FileReferenceValidator_1.FileReferenceValidator; } });
const I18nValidator_1 = require("./service/validation/I18nValidator");
Object.defineProperty(exports, "I18nValidator", { enumerable: true, get: function () { return I18nValidator_1.I18nValidator; } });
const MDKSchemaValidator_1 = require("./service/validation/MDKSchemaValidator");
Object.defineProperty(exports, "MDKSchemaValidator", { enumerable: true, get: function () { return MDKSchemaValidator_1.MDKSchemaValidator; } });
const NameValidator_1 = require("./service/validation/NameValidator");
Object.defineProperty(exports, "NameValidator", { enumerable: true, get: function () { return NameValidator_1.NameValidator; } });
const OverrideActionValidator_1 = require("./service/validation/OverrideActionValidator");
Object.defineProperty(exports, "OverrideActionValidator", { enumerable: true, get: function () { return OverrideActionValidator_1.OverrideActionValidator; } });
const PlatformRiskValidator_1 = require("./service/validation/PlatformRiskValidator");
Object.defineProperty(exports, "PlatformRiskValidator", { enumerable: true, get: function () { return PlatformRiskValidator_1.PlatformRiskValidator; } });
const QueryOptionValidator_1 = require("./service/validation/QueryOptionValidator");
Object.defineProperty(exports, "QueryOptionValidator", { enumerable: true, get: function () { return QueryOptionValidator_1.QueryOptionValidator; } });
const SAPIconValidator_1 = require("./service/validation/SAPIconValidator");
Object.defineProperty(exports, "SAPIconValidator", { enumerable: true, get: function () { return SAPIconValidator_1.SAPIconValidator; } });
const ServiceValidator_1 = require("./service/validation/ServiceValidator");
Object.defineProperty(exports, "ServiceValidator", { enumerable: true, get: function () { return ServiceValidator_1.ServiceValidator; } });
const TargetPathValidator_1 = require("./service/validation/TargetPathValidator");
Object.defineProperty(exports, "TargetPathValidator", { enumerable: true, get: function () { return TargetPathValidator_1.TargetPathValidator; } });
const ValidationFacade_1 = require("./service/validation/ValidationFacade");
Object.defineProperty(exports, "ValidationFacade", { enumerable: true, get: function () { return ValidationFacade_1.ValidationFacade; } });
function internalInitLanguageService() {
    let ValidationResult = require('vscode-json-languageservice/lib/umd/parser/jsonParser.js').ValidationResult;
    ValidationResult.prototype.compare = function (other) {
        var hasProblems = this.hasProblems();
        if (hasProblems !== other.hasProblems()) {
            return hasProblems ? -1 : 1;
        }
        var foundIncorrectType = hasIncorrectType(this);
        if (foundIncorrectType !== hasIncorrectType(other)) {
            return foundIncorrectType ? -1 : 1;
        }
        if (this.enumValueMatch !== other.enumValueMatch) {
            return other.enumValueMatch ? -1 : 1;
        }
        if (this.primaryValueMatches !== other.primaryValueMatches) {
            return this.primaryValueMatches - other.primaryValueMatches;
        }
        if (this.propertiesValueMatches !== other.propertiesValueMatches) {
            return this.propertiesValueMatches - other.propertiesValueMatches;
        }
        if (this.propertiesMatches !== other.propertiesMatches) {
            return this.propertiesMatches - other.propertiesMatches;
        }
        return other.problems.length - this.problems.length;
    };
    function hasIncorrectType(validationResult) {
        if (validationResult.hasProblems) {
            if (validationResult.problems.some(problem => {
                if (problem.message.startsWith('Incorrect type.')) {
                    return true;
                }
            })) {
                return true;
            }
        }
        return false;
    }
}
internalInitLanguageService();
function getLanguageService(params) {
    LogUtil_1.Log.logger = params.logger;
    let schemaVersion = LanguageHelper_1.LanguageHelper.getSchemaVersion(params.sdkVersion, params.documentProvider);
    SchemaProvider_1.SchemaProvider.init(params.documentProvider, schemaVersion);
    ODataMetadataProvider_1.ODataMetadataProvider.init(params.documentProvider);
    let documentProvider = params.documentProvider;
    let validationFacade = new ValidationFacade_1.ValidationFacade(documentProvider);
    validationFacade.register(new MDKSchemaValidator_1.MDKSchemaValidator());
    validationFacade.register(new PlatformRiskValidator_1.PlatformRiskValidator());
    validationFacade.register(new FileReferenceValidator_1.FileReferenceValidator(documentProvider));
    validationFacade.register(new I18nValidator_1.I18nValidator(documentProvider));
    validationFacade.register(new TargetPathValidator_1.TargetPathValidator(documentProvider));
    validationFacade.register(new NameValidator_1.NameValidator(documentProvider));
    validationFacade.register(new QueryOptionValidator_1.QueryOptionValidator(documentProvider));
    validationFacade.register(new EntitySetValidator_1.EntitySetValidator(documentProvider));
    validationFacade.register(new DownloadStreamValidator_1.DownloadStreamValidator(documentProvider));
    validationFacade.register(new ServiceValidator_1.ServiceValidator(documentProvider));
    validationFacade.register(new OverrideActionValidator_1.OverrideActionValidator(documentProvider));
    validationFacade.register(new ExtensionPointValidator_1.ExtensionPointValidator(documentProvider));
    return {
        changeSDKVersion: function (version) {
            let schemaVersion = LanguageHelper_1.LanguageHelper.getSchemaVersion(version, params.documentProvider);
            if (!schemaVersion) {
                schemaVersion = LanguageHelper_1.LanguageHelper.getDefaultSchemaVersion(documentProvider);
            }
            let currentSchemaVersion = SchemaProvider_1.SchemaProvider.getDefaultSchemaVersion();
            if (schemaVersion !== currentSchemaVersion) {
                SchemaProvider_1.SchemaProvider.getInstance(schemaVersion).schemaVersion = schemaVersion;
            }
            return currentSchemaVersion;
        },
        getResFullPath: function (resName) {
            return PathUtil_1.PathUtil.getResFullPath(SchemaProvider_1.SchemaProvider.getInstance().schemaVersion, resName);
        },
        doValidation: function (document, context) {
            let appContext;
            if (context) {
                appContext = {
                    allAppFullPaths: context.appFullPaths,
                    platform: context.platform,
                    referenceApps: context.referenceApps,
                    validationConfig: context.validationConfig
                };
            }
            return validationFacade.validate(document, appContext);
        },
        doCheckUnusedFile: function (document, context) {
            let appContext;
            if (context) {
                appContext = {
                    allAppFullPaths: context.appFullPaths,
                    platform: context.platform,
                    referenceApps: context.referenceApps
                };
            }
            return validationFacade.checkUnused(document, appContext);
        },
        refreshContext: function (document, documentProvider, referenceApps) {
            cache_1.cache.refresh(document.uri, documentProvider, referenceApps);
        },
        refreshSeviceCache: function (id) {
            ODataMetadataProvider_1.ODataMetadataProvider.instance.refreshServiceCache(id);
        }
    };
}
exports.getLanguageService = getLanguageService;
//# sourceMappingURL=mdkLanguageService.js.map