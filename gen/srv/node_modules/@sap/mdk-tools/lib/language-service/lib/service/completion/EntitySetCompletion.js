"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitySetCompletion = void 0;
const ODataMetadataProvider_1 = require("../../common/ODataMetadataProvider");
const TargetHelper_1 = require("../../common/TargetHelper");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
class EntitySetCompletion {
    constructor(documentProvider) {
        this._documentProvider = documentProvider;
        this._oDataMetadataProvider = new ODataMetadataProvider_1.ODataMetadataProvider(documentProvider);
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._appContext = context;
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            let completionItems = [];
            if (TargetHelper_1.TargetHelper.isEntitySetLiteralValueNode(node)) {
                let serviceReference = TargetHelper_1.TargetHelper.getTargetSiblingNodeValue(node, 'Service');
                let referenceApps;
                if (this._appContext) {
                    referenceApps = this._appContext.referenceApps;
                }
                let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(document.uri, this._documentProvider, referenceApps);
                let serviceFullPath = yield baseAppDelegate.toFileFullPath(serviceReference);
                let entities = yield this._oDataMetadataProvider.getEntities(serviceFullPath, document.uri);
                let wordPrefix = _getWordPrefix(document, offset);
                entities.forEach(entitySetName => {
                    if (entitySetName.startsWith(wordPrefix)) {
                        let completionItem = mdkLanguageTypes_1.CompletionItem.create(entitySetName);
                        completionItems.push(completionItem);
                    }
                });
            }
            else if (TargetHelper_1.TargetHelper.isReadLinkEntityLiteralSetValue(node)) {
                let entitySetName = TargetHelper_1.TargetHelper.getTargetSiblingNodeValue(node, 'EntitySet');
                completionItems.push(mdkLanguageTypes_1.CompletionItem.create(`${entitySetName}()`));
            }
            return completionItems;
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
}
exports.EntitySetCompletion = EntitySetCompletion;
function _getWordPrefix(document, offset) {
    let text = document.getText();
    text = text.substring(0, offset);
    let doubleQuotePos = text.lastIndexOf('"');
    let singleQuotePos = text.lastIndexOf('\'');
    let startPos = Math.max(doubleQuotePos, singleQuotePos) + 1;
    return text.substring(startPos, offset);
}
//# sourceMappingURL=EntitySetCompletion.js.map