"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18nCompletion = void 0;
const vscode_uri_1 = require("vscode-uri");
const LanguageHelper_1 = require("../../common/LanguageHelper");
const LogUtil_1 = require("../../common/LogUtil");
const PathUtil_1 = require("../../common/PathUtil");
const RuleHelper_1 = require("../../common/RuleHelper");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
const SchemaVersionAdapter_1 = require("../../tool/SchemaVersionAdapter");
const SchemaProvider_1 = require("../schema/SchemaProvider");
var ContextState;
(function (ContextState) {
    ContextState[ContextState["NoneState"] = 0] = "NoneState";
    ContextState[ContextState["InitialState"] = 1] = "InitialState";
    ContextState[ContextState["InputLocalizationKey"] = 2] = "InputLocalizationKey";
    ContextState[ContextState["InputLocale"] = 3] = "InputLocale";
    ContextState[ContextState["InputCurrencyCode"] = 4] = "InputCurrencyCode";
    ContextState[ContextState["InputTimeZone"] = 5] = "InputTimeZone";
    ContextState[ContextState["InputFormatOption"] = 6] = "InputFormatOption";
    ContextState[ContextState["InputFormatOptionParameter"] = 7] = "InputFormatOptionParameter";
    ContextState[ContextState["InputFormatOptionForDate"] = 8] = "InputFormatOptionForDate";
})(ContextState || (ContextState = {}));
class I18nCompletion {
    constructor(documentProvider) {
        this._overwriteRange = null;
        this._quote = "'";
        this._documentProvider = documentProvider;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._overwriteRange = null;
            this._quote = "'";
            this._appContext = context;
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            let completions = yield this.provideCompletionItems(document, position, this.getContextStateInJS(document, position));
            return this._handleResultCompletionItems(completions);
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            if (!node || LanguageHelper_1.LanguageHelper.isKey(node)) {
                return Promise.resolve([]);
            }
            let completions = yield this.provideCompletionItems(document, position, this.getContextState(document, position));
            return this._handleResultCompletionItems(completions);
        });
    }
    _handleResultCompletionItems(completions) {
        if (!completions) {
            return [];
        }
        return completions.map((item) => {
            if (this._overwriteRange) {
                item.filterText = item.insertText;
                item.textEdit = mdkLanguageTypes_1.TextEdit.replace(this._overwriteRange, item.insertText);
            }
            return item;
        });
    }
    provideCompletionItems(document, position, state) {
        return __awaiter(this, void 0, void 0, function* () {
            switch (state) {
                case ContextState.InitialState:
                    {
                        let schemaVersion = yield SchemaVersionAdapter_1.SchemaVersionHelper.getApplicationSchemaVersion(document.uri);
                        let result = this.getI18nItemsForTypes(schemaVersion);
                        let localizationItems = yield this.getLocalizationItems(document.uri);
                        localizationItems.forEach(item => {
                            item.insertText = "(L, " + item.insertText + ")";
                        });
                        return Promise.resolve(result.concat(localizationItems));
                    }
                case ContextState.InputLocalizationKey:
                    {
                        return this.getLocalizationItems(document.uri);
                    }
                case ContextState.InputLocale:
                    {
                        return Promise.resolve(this.getLocales(document, position));
                    }
                case ContextState.InputCurrencyCode:
                    {
                        return Promise.resolve(this.getCurrencyList());
                    }
                case ContextState.InputTimeZone:
                    {
                        return Promise.resolve(this.getTimeZones());
                    }
                case ContextState.InputFormatOption:
                    {
                        return Promise.resolve(this.getCompletionItemsForFormatOptions(true));
                    }
                case ContextState.InputFormatOptionParameter:
                    {
                        return Promise.resolve(this.getCompletionItemsForFormatOptions(false));
                    }
                case ContextState.InputFormatOptionForDate:
                    {
                        return Promise.resolve(this.getCompletionItemsForFormatDateOptions());
                    }
            }
            return Promise.resolve([]);
        });
    }
    getContextState(document, position) {
        let prefix = LanguageHelper_1.LanguageHelper.getI18nIndicatorPrefix(document, position);
        if (prefix === "$") {
            return ContextState.InitialState;
        }
        else if (prefix && prefix.startsWith("$(L")) {
            if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 1) {
                return ContextState.InputLocalizationKey;
            }
        }
        else if (prefix && (prefix.startsWith("$(N") || (prefix.startsWith("$(P") && !prefix.startsWith("$(PLT")) || prefix.startsWith("$(S"))) {
            if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 2) {
                return ContextState.InputLocale;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 3) {
                return ContextState.InputFormatOption;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) > 3) {
                return ContextState.InputFormatOptionParameter;
            }
        }
        else if (prefix && prefix.startsWith("$(C")) {
            if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 2) {
                return ContextState.InputCurrencyCode;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 3) {
                return ContextState.InputLocale;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 4) {
                return ContextState.InputFormatOption;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) > 4) {
                return ContextState.InputFormatOptionParameter;
            }
        }
        else if (prefix && ((prefix.startsWith("$(D") && !prefix.startsWith("$(DV")) || prefix.startsWith("$(DT") || prefix.startsWith("$(T"))) {
            if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 2) {
                return ContextState.InputLocale;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 3) {
                return ContextState.InputTimeZone;
            }
            else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix) === 4) {
                return ContextState.InputFormatOptionForDate;
            }
        }
        return ContextState.NoneState;
    }
    getContextStateInJS(document, position) {
        let that = this;
        let state = ContextState.NoneState;
        let found = false;
        try {
            let esprima = require('esprima');
            esprima.parseModule(document.getText(), {
                loc: true,
                tolerant: true,
                comment: true
            }, function (node, loc) {
                if (!found && node.type === "CallExpression" && node.callee.property && node.callee.property.name === 'localizeText' && node.arguments.length >= 1 && node.arguments[0].type === "Literal") {
                    let localizationKey = node.arguments[0];
                    let startPosition = RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(localizationKey.loc.start);
                    let endPosition = RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(loc.end);
                    endPosition.character -= 1;
                    if (within(position, localizationKey)) {
                        state = ContextState.InputLocalizationKey;
                        that._quote = localizationKey.raw[0];
                        that._overwriteRange = mdkLanguageTypes_1.Range.create(startPosition, endPosition);
                        found = true;
                    }
                }
                else if (!found && node.type === "CallExpression" && node.callee.property && (node.callee.property.name === 'formatNumber' || node.callee.property.name === 'formatPercentage' || node.callee.property.name === 'formatScientific') && node.arguments.length >= 1) {
                    let value = node.arguments[0];
                    let startPosition = value.loc.start;
                    let endPosition = loc.end;
                    if (within(position, node.arguments[1])) {
                        let localeNode = node.arguments[1];
                        that._quote = localeNode.raw[0];
                        state = ContextState.InputLocale;
                        found = true;
                    }
                    else if (between(position, startPosition, endPosition)) {
                        let tmpStr = document.getText().slice(document.offsetAt(RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(value.loc.end)), document.offsetAt(position));
                        if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 1) {
                            state = ContextState.InputLocale;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 2) {
                            state = ContextState.InputFormatOption;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) > 2) {
                            state = ContextState.InputFormatOptionParameter;
                            found = true;
                        }
                    }
                }
                else if (!found && node.type === "CallExpression" && node.callee.property && node.callee.property.name === 'formatCurrency' && node.arguments.length >= 1) {
                    let value = node.arguments[0];
                    let startPosition = value.loc.start;
                    let endPosition = loc.end;
                    if (within(position, node.arguments[1])) {
                        let currencyNode = node.arguments[1];
                        that._quote = currencyNode.raw[0];
                        state = ContextState.InputCurrencyCode;
                        found = true;
                        that._overwriteRange = _getOverwriteRangeFromEsprimaLoc(currencyNode.loc);
                    }
                    else if (within(position, node.arguments[2])) {
                        let localeNode = node.arguments[2];
                        that._quote = localeNode.raw[0];
                        state = ContextState.InputLocale;
                        found = true;
                    }
                    else if (between(position, startPosition, endPosition)) {
                        let tmpStr = document.getText().slice(document.offsetAt(RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(value.loc.end)), document.offsetAt(position));
                        if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 1) {
                            state = ContextState.InputCurrencyCode;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 2) {
                            state = ContextState.InputLocale;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 3) {
                            state = ContextState.InputFormatOption;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) > 3) {
                            state = ContextState.InputFormatOptionParameter;
                            found = true;
                        }
                    }
                }
                else if (!found && node.type === "CallExpression" && node.callee.property && (node.callee.property.name === 'formatDate' || node.callee.property.name === 'formatDatetime' || node.callee.property.name === 'formatTime') && node.arguments.length >= 1) {
                    let value = node.arguments[0];
                    let startPosition = value.loc.start;
                    let endPosition = loc.end;
                    if (within(position, node.arguments[1])) {
                        let localeNode = node.arguments[1];
                        that._quote = localeNode.raw[0];
                        state = ContextState.InputLocale;
                        found = true;
                    }
                    else if (within(position, node.arguments[2])) {
                        let timeZoneNode = node.arguments[2];
                        that._quote = timeZoneNode.raw[0];
                        state = ContextState.InputTimeZone;
                        found = true;
                        that._overwriteRange = _getOverwriteRangeFromEsprimaLoc(timeZoneNode.loc);
                    }
                    else if (between(position, startPosition, endPosition)) {
                        let tmpStr = document.getText().slice(document.offsetAt(RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(value.loc.end)), document.offsetAt(position));
                        if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 1) {
                            state = ContextState.InputLocale;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 2) {
                            state = ContextState.InputTimeZone;
                            found = true;
                        }
                        else if (LanguageHelper_1.LanguageHelper.getNumOfCamma(tmpStr) === 3) {
                            state = ContextState.InputFormatOptionForDate;
                            found = true;
                        }
                    }
                }
            });
        }
        catch (error) {
            LogUtil_1.Log.error(`Error while parsing ${vscode_uri_1.default.parse(document.uri).fsPath} : ${error}`);
        }
        return state;
    }
    getLocalizationItems(activeDocumentUri) {
        return __awaiter(this, void 0, void 0, function* () {
            let that = this;
            let result = [];
            let appDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(activeDocumentUri, this._documentProvider, this._appContext ? this._appContext.referenceApps : null);
            let i18nContent = yield appDelegate.getDefaultI18nContent();
            if (i18nContent) {
                let PropertiesParser = require('properties-parser');
                let properties = PropertiesParser.parse(i18nContent);
                Object.keys(properties).forEach((key) => {
                    let message = properties[key];
                    let insertText = key;
                    if (PathUtil_1.PathUtil.getMDKFileType(activeDocumentUri) === PathUtil_1.MDKFileType.Rule) {
                        insertText = that._quote + key + that._quote;
                    }
                    for (let i = 0; i < LanguageHelper_1.LanguageHelper.getNumOfParms(message); i++) {
                        insertText += ", ${" + (i + 1) + ":parameter" + (i + 1) + "}";
                    }
                    result.push({
                        label: key + "=" + message,
                        insertText: insertText,
                        insertTextFormat: mdkLanguageTypes_1.InsertTextFormat.Snippet,
                        detail: "Key: " + key + "\nValue: " + message
                    });
                });
            }
            return result;
        });
    }
    getI18nItemsForTypes(schemaVersion) {
        let completionItems = [];
        let signatureFullPath = PathUtil_1.PathUtil.getResFullPath(SchemaProvider_1.SchemaProvider.getInstance(schemaVersion).schemaVersion, "Signature.json");
        let signatureContent = this.getResourceContent(signatureFullPath);
        let signatureList = JSON.parse(signatureContent);
        signatureList.forEach(si => {
            let completionItem = mdkLanguageTypes_1.CompletionItem.create(si.Signature.substr(1));
            completionItem.insertText = si.Snippet;
            completionItem.insertTextFormat = mdkLanguageTypes_1.InsertTextFormat.Snippet;
            completionItem.detail = si.Signature;
            completionItem.documentation = si.documentation;
            if (si.Type === "L") {
                completionItem.command = {
                    title: 'Suggest',
                    command: 'editor.action.triggerSuggest'
                };
            }
            completionItems.push(completionItem);
        });
        return completionItems;
    }
    getCodeList(resourceName) {
        let resourceFullPath = PathUtil_1.PathUtil.getI18nResFullPath(resourceName);
        let codeListContent = this.getResourceContent(resourceFullPath);
        let codeList = JSON.parse(codeListContent);
        let result = codeList.map(item => {
            let completionItem = mdkLanguageTypes_1.CompletionItem.create(item.Name + ": " + item.Code);
            completionItem.insertText = this._quote + item.Code + this._quote;
            return completionItem;
        });
        return result;
    }
    getCurrencyList() {
        return this.getCodeList("Currency.json");
    }
    getLocales(document, position) {
        let prevChar = document.getText()[document.offsetAt(position) - 1];
        let result = [];
        if (prevChar === '-') {
            let countryList = this.getCodeList("Country.json");
            if (countryList) {
                countryList.forEach(country => {
                    let locale = country.insertText.slice(1, -1);
                    result.push({
                        label: country.label,
                        insertText: locale
                    });
                });
            }
        }
        else {
            let languageList = this.getCodeList("Language.json");
            if (languageList) {
                languageList.forEach(language => {
                    let locale = language.insertText.slice(1, -1);
                    result.push({
                        label: language.label,
                        insertText: this._quote + locale + '-$1' + this._quote,
                        insertTextFormat: mdkLanguageTypes_1.InsertTextFormat.Snippet,
                        command: {
                            title: 'Suggest',
                            command: 'editor.action.triggerSuggest'
                        }
                    });
                });
            }
        }
        return result;
    }
    getTimeZones() {
        return this.getCodeList("TimeZone.json");
    }
    getCompletionItemsForFormatOptions(needBracket) {
        const FormatOptions = ["minimumIntegerDigits : ${1:1}", "minimumFractionDigits : ${1:0}", "maximumFractionDigits : ${1:2}", "useGrouping : ${1|true,false|}"];
        let completionItems = [];
        FormatOptions.forEach(option => {
            let insertText = option;
            if (needBracket) {
                insertText = "{" + insertText + "}";
            }
            completionItems.push({
                label: option.slice(0, option.indexOf(' ')),
                insertText: insertText,
                insertTextFormat: mdkLanguageTypes_1.InsertTextFormat.Snippet
            });
        });
        return completionItems;
    }
    getCompletionItemsForFormatDateOptions() {
        const snippet = "{format:${1|'short','medium','long','full'|}}";
        let completionItems = [];
        completionItems.push({
            label: 'format',
            insertText: snippet,
            insertTextFormat: mdkLanguageTypes_1.InsertTextFormat.Snippet
        });
        return completionItems;
    }
    getResourceContent(fullPath) {
        return this._documentProvider.getDocumentTextSync(fullPath);
    }
}
exports.I18nCompletion = I18nCompletion;
function between(position, esprimaStartPosition, esprimaEndPosition) {
    let startPosition = RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(esprimaStartPosition);
    let endPosition = RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(esprimaEndPosition);
    return LanguageHelper_1.LanguageHelper.Position.isAfter(position, startPosition) && LanguageHelper_1.LanguageHelper.Position.isBefore(position, endPosition);
}
function within(position, esprimaNode) {
    return esprimaNode && between(position, esprimaNode.loc.start, esprimaNode.loc.end);
}
function _getOverwriteRangeFromEsprimaLoc(loc) {
    return mdkLanguageTypes_1.Range.create(RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(loc.start), RuleHelper_1.RuleHelper.getPositionFromEsprimaPosition(loc.end));
}
//# sourceMappingURL=I18nCompletion.js.map