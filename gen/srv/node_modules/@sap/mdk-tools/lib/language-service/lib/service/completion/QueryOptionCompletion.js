"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryOptionCompletion = void 0;
const _ = require("lodash");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const LanguageHelper_1 = require("../../common/LanguageHelper");
const ODataMetadataProvider_1 = require("../../common/ODataMetadataProvider");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
class QueryOptionCompletion {
    constructor(documentProvider) {
        this._overwriteRange = null;
        this._documentProvider = documentProvider;
    }
    initContext(document) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._overwriteRange = null;
            this._appContext = context;
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve([]);
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            if (!this._isQueryOptionProperty(node)) {
                return Promise.resolve([]);
            }
            return this._provideCompletionItems(document, position, node).then((items) => {
                if (!items) {
                    return [];
                }
                return items.map((item) => {
                    item.command = {
                        title: 'Suggest',
                        command: 'editor.action.triggerSuggest'
                    };
                    if (this._overwriteRange) {
                        item.filterText = item.insertText;
                        item.textEdit = mdkLanguageTypes_1.TextEdit.replace(this._overwriteRange, item.insertText);
                    }
                    else {
                        let insertText = item.label;
                        if (item.insertText) {
                            insertText = item.insertText;
                        }
                        item.textEdit = mdkLanguageTypes_1.TextEdit.insert(position, insertText);
                    }
                    return item;
                });
            });
        });
    }
    _provideCompletionItems(document, position, node) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initContext(document);
            let parser = require('../../common/QueryOptionParser');
            let offset = document.offsetAt(position);
            let expr = this._getCurrentExpression(document, offset);
            let lastChar = expr.expression.slice(-1);
            let relativeOffset = offset - expr.offset;
            let option = { ast: {} };
            try {
                let ast = parser.parse(expr.expression, option);
                relativeOffset++;
                option = { ast: {} };
                ast = parser.parse(expr.expression + '#', option);
            }
            catch (e) {
                let result = [];
                e.expected = _.uniq(e.expected);
                if (e.expected && e.location.end.offset === relativeOffset) {
                    let promises = e.expected.map((expectedItem) => __awaiter(this, void 0, void 0, function* () {
                        if (expectedItem.type === 'literal') {
                            let text = expectedItem.text;
                            let display = text;
                            if (display.startsWith('"')) {
                                display = display.slice(1, -1);
                            }
                            if (!display.startsWith('%')) {
                                result.push({ label: display, kind: vscode_languageserver_types_1.CompletionItemKind.Value });
                            }
                        }
                        else if (expectedItem.type === 'other') {
                            if (expectedItem.description === 'identifier') {
                                let properties = yield this._getEntityProperties(document.uri, node, option.ast, lastChar);
                                result.push(...properties);
                            }
                            else if (expectedItem.description === 'integer') {
                                let completionItem = mdkLanguageTypes_1.CompletionItem.create(expectedItem.description);
                                completionItem.insertText = "${1:num}";
                                completionItem.insertTextFormat = mdkLanguageTypes_1.InsertTextFormat.Snippet;
                                result.push(completionItem);
                            }
                        }
                    }));
                    yield Promise.all(promises);
                    result = _.uniq(result);
                    return result;
                }
                return result;
            }
            return Promise.resolve([]);
        });
    }
    _isQueryOptionProperty(node) {
        if (node && node.parent && node.parent.keyNode && node.parent.keyNode.value === 'QueryOptions' && node.parent.parent && node.parent.parent.parent && node.parent.parent.parent.keyNode && ["Target", "DesignTimeTarget"].indexOf(node.parent.parent.parent.keyNode.value) > -1) {
            return true;
        }
        return false;
    }
    _getEntityProperties(anchorDocumentUri, node, ast, lastChar) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let properties;
            if (ast.state === 'select' || ast.state === 'orderby' || ast.state === 'expand') {
                let target = LanguageHelper_1.LanguageHelper.getTargetObject(node);
                if (target && target.Service && target.EntitySet) {
                    let referenceApps;
                    if (this._appContext) {
                        referenceApps = this._appContext.referenceApps;
                    }
                    let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(anchorDocumentUri, this._documentProvider, referenceApps);
                    let serviceFullPath = yield baseAppDelegate.toFileFullPath(target.Service);
                    let propertyPath = null;
                    if (lastChar === '/') {
                        propertyPath = ast.identifierPath;
                    }
                    let newEntitySet = yield this._getEntitySetForPropertyPath(propertyPath, target.EntitySet, serviceFullPath, node, anchorDocumentUri);
                    if (newEntitySet) {
                        if (ast.state === 'expand') {
                            properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getNavigationEntityProperties(serviceFullPath, newEntitySet, anchorDocumentUri);
                        }
                        else {
                            properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityProperties(serviceFullPath, newEntitySet, anchorDocumentUri);
                        }
                    }
                }
            }
            else if (ast.state === 'filter') {
                let target = LanguageHelper_1.LanguageHelper.getTargetObject(node);
                if (target && target.Service && target.EntitySet) {
                    let referenceApps;
                    if (this._appContext) {
                        referenceApps = this._appContext.referenceApps;
                    }
                    let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(anchorDocumentUri, this._documentProvider, referenceApps);
                    let serviceFullPath = yield baseAppDelegate.toFileFullPath(target.Service);
                    let newEntitySet = target.EntitySet;
                    if (ast.lambdaPropertyPath) {
                        newEntitySet = yield this._getEntitySetForPropertyPath(ast.lambdaPropertyPath, newEntitySet, serviceFullPath, node, anchorDocumentUri);
                    }
                    let propertyPath = null;
                    if (lastChar === '/') {
                        propertyPath = ast.identifierPath;
                    }
                    newEntitySet = yield this._getEntitySetForPropertyPath(propertyPath, newEntitySet, serviceFullPath, node, anchorDocumentUri);
                    if (newEntitySet) {
                        properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityProperties(serviceFullPath, newEntitySet, anchorDocumentUri);
                    }
                }
            }
            if (properties) {
                properties.forEach(property => {
                    result.push({ label: property, kind: vscode_languageserver_types_1.CompletionItemKind.Property });
                });
            }
            return result;
        });
    }
    _getEntitySetForPropertyPath(p, entityType, serviceFullPath, node, anchorDocumentUri) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!p) {
                return entityType;
            }
            if (serviceFullPath && entityType) {
                let properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityProperties(serviceFullPath, entityType, anchorDocumentUri);
                if (properties) {
                    let propertyName;
                    let remainingPropertyName;
                    let slashPos = p.indexOf('/');
                    if (slashPos >= 0) {
                        propertyName = p.slice(0, slashPos);
                        remainingPropertyName = p.slice(slashPos + 1);
                    }
                    else {
                        propertyName = p;
                    }
                    let result = properties.find(property => propertyName === property);
                    if (!result) {
                        return;
                    }
                    let type = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityByNavigationProperty(serviceFullPath, entityType, propertyName, anchorDocumentUri);
                    if (remainingPropertyName) {
                        return yield this._getEntitySetForPropertyPath(remainingPropertyName, type, serviceFullPath, node, anchorDocumentUri);
                    }
                    return type;
                }
            }
        });
    }
    _getCurrentExpression(document, offset) {
        let text = document.getText();
        text = text.substring(0, offset);
        let doubleQuotePos = text.lastIndexOf('"');
        let addressPos = text.lastIndexOf('&');
        let startPos = Math.max(doubleQuotePos, addressPos) + 1;
        return { expression: text.substring(startPos, offset), offset: startPos };
    }
}
exports.QueryOptionCompletion = QueryOptionCompletion;
//# sourceMappingURL=QueryOptionCompletion.js.map