"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDKHover = void 0;
const URL = require("url");
const jsonParser_1 = require("vscode-json-languageservice/lib/umd/parser/jsonParser");
const SchemaVersionAdapter_1 = require("../../tool/SchemaVersionAdapter");
const SchemaProvider_1 = require("../schema/SchemaProvider");
const SchemaService_1 = require("../schema/SchemaService");
let JSONHover = require('vscode-json-languageservice/lib/umd/services/jsonHover.js').JSONHover;
let workspaceContext = {
    resolveRelativePath: (relativePath, resource) => {
        return URL.resolve(resource, relativePath);
    }
};
let currentDocument = null;
let currentJsonDocument = null;
let _appContext;
let schemaRequestService = (fsPath) => {
    return SchemaVersionAdapter_1.SchemaVersionHelper.getApplicationSchemaVersion(fsPath).then(schemaVersion => {
        return SchemaProvider_1.SchemaProvider.getInstance(schemaVersion).getSchema(fsPath, currentJsonDocument, currentDocument.uri, _appContext);
    });
};
class MDKHover {
    constructor() {
        let schemaService = new SchemaService_1.MDKSchemaService(schemaRequestService, workspaceContext, Promise);
        this._mdkHover = new JSONHover(schemaService, [], Promise);
    }
    provideHover(document, position) {
        let jsonDocument = (0, jsonParser_1.parse)(document);
        currentDocument = document;
        currentJsonDocument = jsonDocument;
        return this._mdkHover.doHover(document, position, jsonDocument);
    }
}
exports.MDKHover = MDKHover;
//# sourceMappingURL=MDKHover.js.map