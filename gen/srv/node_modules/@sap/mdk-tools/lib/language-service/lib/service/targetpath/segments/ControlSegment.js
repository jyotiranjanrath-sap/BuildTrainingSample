"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ControlSegment = void 0;
const ErrorMessage_1 = require("../../../common/ErrorMessage");
const Context_1 = require("../../targetpath/Context");
const IMDKPage_1 = require("../IMDKPage");
const ISegment_1 = require("./ISegment");
/**
 * Represents a control segment. A control segment must start with #Control.
 */
class ControlSegment extends ISegment_1.ISegment {
    /**
     * Tries to resolve the segment string in the context.
     * @returns {IContext} - The context as the result of
     * the evaluation. If the evaluation is successful, one of the properties (or both) of the context
     * will contain the result. If the process fails, the previously set error handler will be called, and also the
     * error is triggerred. Always not undefined.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateContext();
            let control = this.findControlByName(this.specifier);
            if (!control) {
                throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.FAILED_FIND_CONTROL_IN_VIEW, this.specifier));
            }
            let result = new Context_1.Context();
            result.pages = this.context.pages;
            result.fragments = this.context.fragments;
            result.element = control;
            return result;
        });
    }
    /**
     * Find a control by its name. Looking through the provided context, and tries to find a control
     * with a specific name.
     * @param {string} controlName - Name of the control
     * @returns {IControl} - The result of the evaluation, can be undefined
     */
    findControlByName(controlName) {
        const page = this.context.element;
        let control = null;
        if (page && page.controls) {
            control = page.controls.find(element => element.name === controlName);
        }
        if (!control) {
            let pages = this.context.pages;
            if (pages) {
                for (let i = 0; i < pages.length; i++) {
                    control = pages[i].controls.find(element => element.name === controlName);
                    if (control) {
                        break;
                    }
                }
            }
        }
        // continue to find control in fragments
        if (!control) {
            let fragments = this.context.fragments;
            if (fragments) {
                for (let i = 0; i < fragments.length; i++) {
                    control = fragments[i].controls.find(element => element.name === controlName);
                    if (control) {
                        break;
                    }
                }
            }
        }
        return control;
    }
    validateContext() {
        if (!this.context.element && this.context.binding) {
            throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.INVALID_CONTEXT_FOR_SEGMENT, 'Control'));
        }
        if (this.context.element && !(0, IMDKPage_1.isMDKPage)(this.context.element)) {
            throw new Error(ErrorMessage_1.ErrorMessage.FAILED_FIND_PAGE);
        }
    }
}
exports.ControlSegment = ControlSegment;
//# sourceMappingURL=ControlSegment.js.map