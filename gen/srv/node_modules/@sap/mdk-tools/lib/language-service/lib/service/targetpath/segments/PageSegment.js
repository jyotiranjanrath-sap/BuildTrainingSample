"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageSegment = void 0;
const ErrorMessage_1 = require("../../../common/ErrorMessage");
const PathUtil_1 = require("../../../common/PathUtil");
const SchemaVersionAdapter_1 = require("../../../tool/SchemaVersionAdapter");
const Context_1 = require("../../targetpath/Context");
const ISegment_1 = require("./ISegment");
/**
 * Represents a page segment. A page segment must start with #Page.
 */
class PageSegment extends ISegment_1.ISegment {
    /**
     * Tries to resolve the segment string given the context.
     * @returns {IContext} - The context contains the result of the evaluation.
     * If the evaulation is successful, the page's context is returned as
     * the result. If the process fails, the previously set error handler will be called. Always not undefined.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateContext();
            // let currentSchemaVersion = SchemaVersionHelper.getSchemaVersion();
            const pageName = this.specifier;
            let page = SchemaVersionAdapter_1.validation.resolvePageSegment(pageName, this);
            // let page: IMDKPage = null;
            // if (pageName === '-Previous') {
            // 	page = this.findPreviousPage();
            // } else if (pageName === '-Current' && currentSchemaVersion >= "5.3") {
            // 	page = this.findCurrentPage();
            // } else {
            // 	page = this.findPageByName(pageName);
            // }
            // return page.context;
            let result = new Context_1.Context();
            result.pages = this.context.pages;
            result.element = page;
            return result;
        });
    }
    /**
     * Find a page by its name. Looking through the provided context, it tries to find a page
     * with a specific name.
     * @param {string} pageName - Name of the page
     * @returns {IMDKPage} - The result of the evaluation.
     */
    findPageByName(pageName) {
        let pages = this.context.pages;
        let page = pages.find(page => page.definition._Name === pageName);
        if (page) {
            return page;
        }
        throw new Error(`Failed to find page with name ${pageName}`);
    }
    /**
     * Finds the context of the previous page.
     * @returns {IMDKPage} - The previous page.
     */
    findPreviousPage() {
        return { definition: null, controls: null, isMDKPage: true };
    }
    findCurrentPage() {
        let pages = this.context.pages;
        if (this.context.anchorDocumentUri) {
            let currPageFullPath = PathUtil_1.PathUtil.tryParseUri(this.context.anchorDocumentUri);
            let page = pages.find(page => page.fullPath === currPageFullPath);
            if (page) {
                return page;
            }
        }
        return this.findPreviousPage();
    }
    validateContext() {
        if (this.context.element || this.context.binding) {
            throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.INVALID_CONTEXT_FOR_SEGMENT, 'Page'));
        }
    }
}
exports.PageSegment = PageSegment;
//# sourceMappingURL=PageSegment.js.map