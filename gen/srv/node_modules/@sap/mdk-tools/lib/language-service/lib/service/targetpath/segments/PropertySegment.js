"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PropertySegment = void 0;
const ErrorMessage_1 = require("../../../common/ErrorMessage");
const LanguageHelper_1 = require("../../../common/LanguageHelper");
const ODataMetadataProvider_1 = require("../../../common/ODataMetadataProvider");
const TargetHelper_1 = require("../../../common/TargetHelper");
const MDKApplicationDelegate_1 = require("../../../export/MDKApplicationDelegate");
const Context_1 = require("../../targetpath/Context");
const IMDKPage_1 = require("../IMDKPage");
const ISegment_1 = require("./ISegment");
/**
 * Represents a property segment. A property segment must start with #Property.
 */
class PropertySegment extends ISegment_1.ISegment {
    /**
     * Tries to resolveSync the segment string given the context.
     * @returns {IContext} - The context as the result of the evaluation.
     * If the evaulation is successful, the context will contain
     * the result. If the process fails, the previously set error handler will be called. Always not undefined.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateContext();
            let isNavigationProperty = false;
            let isODataBindingValue = LanguageHelper_1.LanguageHelper.isODataBindingValueContext(this.context.currentNode);
            if (LanguageHelper_1.LanguageHelper.isODataAnnotationValue(this.specifier) || isODataBindingValue) {
                isNavigationProperty = yield this._findPropertyByService(this.specifier, this.context.binding ? this.context.binding.entitySet : null);
                if (isODataBindingValue) {
                    yield this._checkNavigationProperty();
                }
            }
            let binding = {
                isPropertySegment: true,
                property: this.specifier,
                isNavigationProperty: isNavigationProperty,
                position: this.context.position
            };
            let target = LanguageHelper_1.LanguageHelper.getTargetObject(this.context.currentNode);
            if (target) {
                let entitySet = target.EntitySet;
                if (this.context.binding) {
                    entitySet = this.context.binding.entitySet;
                }
                if (entitySet) {
                    let referenceApps;
                    if (this.context.appContext) {
                        referenceApps = this.context.appContext.referenceApps;
                    }
                    let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(this.context.anchorDocumentUri, this.context.documentProvider, referenceApps);
                    let serviceFullPath = yield baseAppDelegate.toFileFullPath(target.Service);
                    binding.entitySet = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityByNavigationProperty(serviceFullPath, entitySet, this.specifier, this.context.anchorDocumentUri);
                }
                else {
                    binding.entitySet = null;
                }
            }
            let resutlContext = new Context_1.Context(binding);
            resutlContext.currentNode = this.context.currentNode;
            resutlContext.anchorDocumentUri = this.context.anchorDocumentUri;
            resutlContext.position = this.context.position;
            resutlContext.documentProvider = this.context.documentProvider;
            resutlContext.appContext = this.context.appContext;
            return resutlContext;
        });
    }
    _checkNavigationProperty() {
        return __awaiter(this, void 0, void 0, function* () {
            let target = LanguageHelper_1.LanguageHelper.getTargetObject(this.context.currentNode);
            if (target) {
                if (target.Service && target.EntitySet && this.context.anchorDocumentUri) {
                    let referenceApps;
                    if (this.context.appContext) {
                        referenceApps = this.context.appContext.referenceApps;
                    }
                    let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(this.context.anchorDocumentUri, this.context.documentProvider, referenceApps);
                    let serviceFullPath = yield baseAppDelegate.toFileFullPath(target.Service);
                    let properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getNonNavigationEntityProperties(serviceFullPath, target.EntitySet, this.context.anchorDocumentUri);
                    if (properties.some(property => {
                        if (!property.startsWith('@')) {
                            return true;
                        }
                        return false;
                    })) {
                        if (this.context.binding && this.context.binding.isPropertySegment && !this.context.binding.isNavigationProperty) {
                            let error = Error(ErrorMessage_1.ErrorMessage.format(`The property ${this.context.binding.property} is not a navigation property and cannot be followed by another property.`));
                            if (this.context.binding.position && this.context.binding.property) {
                                error.location = {
                                    start: this.context.binding.position,
                                    end: this.context.binding.position + this.context.binding.property.length + 10 // 10 is the length of '#Property:'
                                };
                            }
                            throw error;
                        }
                    }
                }
            }
        });
    }
    _findPropertyByService(propertyName, entitySet) {
        return __awaiter(this, void 0, void 0, function* () {
            let isNavigationProperty = false;
            let target = LanguageHelper_1.LanguageHelper.getTargetObject(this.context.currentNode);
            if (target) {
                if (!entitySet) {
                    entitySet = target.EntitySet;
                }
                if (target.Service && entitySet) {
                    let _this = this;
                    let found = false;
                    let hasNonPredefinedProperty = false;
                    let referenceApps;
                    if (this.context.appContext) {
                        referenceApps = this.context.appContext.referenceApps;
                    }
                    let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(this.context.anchorDocumentUri, this.context.documentProvider, referenceApps);
                    let serviceFullPath = yield baseAppDelegate.toFileFullPath(target.Service);
                    yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getNonNavigationEntityProperties(serviceFullPath, entitySet, this.context.anchorDocumentUri).then(properties => {
                        _this._checkProperties(properties, propertyName, (foundProperty) => {
                            found = foundProperty;
                            hasNonPredefinedProperty = true;
                        });
                    });
                    if (!found) {
                        yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getNavigationEntityProperties(serviceFullPath, entitySet, this.context.anchorDocumentUri).then(properties => {
                            _this._checkProperties(properties, propertyName, (foundProperty) => {
                                if (foundProperty) {
                                    found = true;
                                    isNavigationProperty = foundProperty;
                                }
                                hasNonPredefinedProperty = true;
                            });
                        });
                    }
                    if (hasNonPredefinedProperty && !found) {
                        throw new Error(ErrorMessage_1.ErrorMessage.format(`Property with name ${this.specifier} cannot be found in ` + TargetHelper_1.TargetHelper.getServiceXmlReference(target.Service) + '.'));
                    }
                }
            }
            return isNavigationProperty;
        });
    }
    _checkProperties(properties, propertyName, callback) {
        if (properties) {
            if (!propertyName.startsWith('@')) {
                properties = properties.filter(property => {
                    return !property.startsWith('@');
                });
            }
            for (let property of properties) {
                let found = property === propertyName;
                callback(found);
                if (found) {
                    break;
                }
            }
        }
    }
    validateContext() {
        if ((this.context.binding && this.context.binding.isFilterValue) || (this.context.element && !(0, IMDKPage_1.isMDKPage)(this.context.element)) || (this.context.binding && typeof (this.context.binding) === 'number')) {
            throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.INVALID_CONTEXT_FOR_SEGMENT, 'Property'));
        }
    }
}
exports.PropertySegment = PropertySegment;
//# sourceMappingURL=PropertySegment.js.map