"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SegmentFactory = void 0;
const ActionResultsSegment_1 = require("./ActionResultsSegment");
const ApplicationSegment_1 = require("./ApplicationSegment");
const ClientDataSegment_1 = require("./ClientDataSegment");
const ControlSegment_1 = require("./ControlSegment");
const CountSegment_1 = require("./CountSegment");
const FilterValueSegment_1 = require("./FilterValueSegment");
const FirstSegment_1 = require("./FirstSegment");
const IndexSegment_1 = require("./IndexSegment");
const ISegmentFactory_1 = require("./ISegmentFactory");
const LastSegment_1 = require("./LastSegment");
const PageSegment_1 = require("./PageSegment");
const PropertySegment_1 = require("./PropertySegment");
const SelectedRowSegment_1 = require("./SelectedRowSegment");
const SelectedTargetSegment_1 = require("./SelectedTargetSegment");
const SelectedValueSegment_1 = require("./SelectedValueSegment");
const ValueSegment_1 = require("./ValueSegment");
const AppDataSegment_1 = require("./AppDataSegment");
/**
 * Simple factory class, which instantiates an implementation of {ISegment}, based on the
 * prefix of the segment string.
 */
class SegmentFactory {
    /**
     * Create an implementation of {ISegment} interface.
     * @param {string} segment - The segment string, can be undefined.
     * @param {IContext} context - IContext, where the segment string can be evaluated.
     */
    static build(segment, context) {
        if (!segment || segment.length === 0) {
            return undefined;
        }
        const selectors = segment.split(':');
        const segmentType = selectors[0];
        const specifier = selectors[1];
        if (segmentType === SegmentFactory.PAGE) {
            return new PageSegment_1.PageSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.CLIENT_DATA) {
            return new ClientDataSegment_1.ClientDataSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.CONTROL) {
            return new ControlSegment_1.ControlSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.PROPERTY) {
            return new PropertySegment_1.PropertySegment(specifier, context);
        }
        else if (segmentType === (SegmentFactory.FIRST)) {
            return new FirstSegment_1.FirstSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.VALUE) {
            return new ValueSegment_1.ValueSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.SELECTED_VALUE) {
            return new SelectedValueSegment_1.SelectedValueSegment(specifier, context);
        }
        else if (segmentType === (SegmentFactory.SELECTED_TARGET)) {
            return new SelectedTargetSegment_1.SelectedTargetSegment(specifier, context);
        }
        else if (segmentType === (SegmentFactory.SELECTED_ROW)) {
            return new SelectedRowSegment_1.SelectedRowSegment(specifier, context);
        }
        else if (segmentType === (SegmentFactory.LAST)) {
            return new LastSegment_1.LastSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.COUNT) {
            return new CountSegment_1.CountSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.INDEX) {
            return new IndexSegment_1.IndexSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.ACTION_RESULTS) {
            return new ActionResultsSegment_1.ActionResultsSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.APPLICATION) {
            return new ApplicationSegment_1.ApplicationSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.FILTER_VALUE) {
            return new FilterValueSegment_1.FilterValueSegment(specifier, context);
        }
        else if (segmentType === SegmentFactory.APP_DATA) {
            return new AppDataSegment_1.AppDataSegment(specifier, context);
        }
        else {
            if (typeof selectors[0] === 'number' && Number.isInteger(selectors[0]) && selectors[0] >= 0) {
                return new IndexSegment_1.IndexSegment(selectors[0], context);
            }
            else if (typeof selectors[0] === 'string' && selectors[0].match(/^[\w&.\-@]+$/)) {
                return new PropertySegment_1.PropertySegment(selectors[0], context);
            }
            else {
                return undefined;
            }
        }
    }
}
exports.SegmentFactory = SegmentFactory;
SegmentFactory.ACTION_RESULTS = '#ActionResults';
SegmentFactory.PAGE = '#Page';
SegmentFactory.CLIENT_DATA = '#ClientData';
SegmentFactory.CONTROL = '#Control';
SegmentFactory.PROPERTY = '#Property';
SegmentFactory.FIRST = '#First';
SegmentFactory.VALUE = '#Value';
SegmentFactory.SELECTED_VALUE = '#SelectedValue';
SegmentFactory.SELECTED_TARGET = '#SelectedTarget';
SegmentFactory.SELECTED_ROW = '#SelectedRow';
SegmentFactory.LAST = '#Last';
SegmentFactory.COUNT = '#Count';
SegmentFactory.INDEX = '#Index';
SegmentFactory.APPLICATION = '#Application';
SegmentFactory.FILTER_VALUE = '#FilterValue';
SegmentFactory.APP_DATA = '#AppData';
ISegmentFactory_1.ISegmentFactory.setBuildFunction(SegmentFactory.build);
//# sourceMappingURL=SegmentFactory.js.map