"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectedValueSegment = void 0;
const ErrorMessage_1 = require("../../../common/ErrorMessage");
const LanguageHelper_1 = require("../../../common/LanguageHelper");
const Context_1 = require("../../targetpath/Context");
const ISegment_1 = require("./ISegment");
/**
 * Represents a value segment. A value segment must start with #SelectedValue.
 */
class SelectedValueSegment extends ISegment_1.ISegment {
    /**
     * Tries to resolve the segment string in the context.
     * @returns {IContext} The value(any) of selected item
     * If the process fails, the previously set error handler will be called. Always not undefined.
     */
    resolve() {
        return __awaiter(this, void 0, void 0, function* () {
            this.validateContext();
            let result = new Context_1.Context({});
            result.pages = this.context.pages;
            return result;
        });
    }
    isSpecifierRequired() {
        return false;
    }
    validateContext() {
        // the control should be a List Control
        let control = this.context.element;
        if (!this.context.element || !this.context.element.getValue) {
            throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.NO_VALUE_IN_CONTROL, this.context.element));
        }
        if (!control || !LanguageHelper_1.LanguageHelper.isListControl(control.type)) {
            throw new Error(ErrorMessage_1.ErrorMessage.format(ErrorMessage_1.ErrorMessage.NO_VALUE_IN_SELECTED_ELEMENT, this.context.element));
        }
    }
}
exports.SelectedValueSegment = SelectedValueSegment;
//# sourceMappingURL=SelectedValueSegment.js.map