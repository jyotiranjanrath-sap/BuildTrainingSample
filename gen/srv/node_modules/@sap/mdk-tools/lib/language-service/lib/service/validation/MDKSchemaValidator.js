"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDKSchemaValidator = void 0;
const URL = require("url");
const PathUtil_1 = require("../../common/PathUtil");
const MDKDefinitions_1 = require("../../export/MDKDefinitions");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
const FragmentOverrideValidationHelper_1 = require("../../tool/FragmentOverrideValidationHelper");
const SchemaVersionAdapter_1 = require("../../tool/SchemaVersionAdapter");
const SchemaProvider_1 = require("../schema/SchemaProvider");
const SchemaService_1 = require("../schema/SchemaService");
const JSONValidation = require('vscode-json-languageservice/lib/umd/services/jsonValidation.js').JSONValidation;
const WorkspaceContext = {
    resolveRelativePath: (relativePath, resource) => {
        return URL.resolve(resource, relativePath);
    }
};
let _appContext;
class MDKSchemaValidator {
    constructor() {
        _appContext = {};
    }
    isSupportDocument(document) {
        return [PathUtil_1.MDKFileType.Rule, PathUtil_1.MDKFileType.MergeMap].indexOf(PathUtil_1.PathUtil.getMDKFileType(document.uri)) < 0;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            _appContext[document.uri] = Object.assign({}, context);
        });
    }
    validateJsonDocument(document, jsonDocument, schemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let fragmentOverrideValidationHelper = new FragmentOverrideValidationHelper_1.FragmentOverrideValidationHelper(_appContext);
            yield fragmentOverrideValidationHelper.resolve(document, jsonDocument);
            let mdkSchemaService = new SchemaService_1.MDKSchemaService(_schemaRequestCallback.bind({
                'document': fragmentOverrideValidationHelper.document,
                'jsonDocument': fragmentOverrideValidationHelper.jsonDocument
            }), WorkspaceContext, Promise);
            let mdkSchemaValidator = new JSONValidation(mdkSchemaService, Promise);
            mdkSchemaValidator.configure({ validate: true, allowComments: false });
            return mdkSchemaValidator.doValidation(fragmentOverrideValidationHelper.document, fragmentOverrideValidationHelper.jsonDocument).then(diagnostics => {
                let resultDiagnostics = [];
                diagnostics.forEach((diagnostic) => {
                    let diagnosticNew;
                    if (fragmentOverrideValidationHelper.hasComplexFragment || fragmentOverrideValidationHelper.hasFragment) {
                        diagnosticNew = fragmentOverrideValidationHelper.convertDiagnosticRange(document, jsonDocument, diagnostic);
                    }
                    else {
                        diagnosticNew = diagnostic;
                    }
                    if (diagnosticNew && !this._canBeIgnored(document, jsonDocument, schemas, diagnosticNew)) {
                        if (diagnosticNew.severity === mdkLanguageTypes_1.DiagnosticSeverity.Warning) {
                            diagnosticNew.severity = mdkLanguageTypes_1.DiagnosticSeverity.Error;
                        }
                        resultDiagnostics.push(diagnosticNew);
                    }
                });
                resultDiagnostics.forEach(item => item.source = MDKDefinitions_1.MDKValidator.Schema);
                return resultDiagnostics;
            });
        });
    }
    _canBeIgnored(document, jsonDocument, schemas, diagnostic) {
        let offset = document.offsetAt(diagnostic.range.start);
        let node = jsonDocument.getNodeFromOffset(offset);
        let matchingSchemas = [];
        for (let schema of schemas) {
            if (schema.node === node && !schema.inverted && schema.schema) {
                matchingSchemas.push(schema.schema);
            }
        }
        // ignore enum errors with the same enum values that are only different in case.
        let errorText = document.getText(diagnostic.range).trim();
        for (let ms of matchingSchemas) {
            if (ms.enum) {
                if (ms.enum.some(value => {
                    if ('"' + value.toLocaleLowerCase() + '"' === errorText.toLocaleLowerCase()) {
                        return true;
                    }
                    return false;
                })) {
                    return true;
                }
            }
            else if (ms.type === 'object') {
                // ignore errors for object type property that value match the rule file path pattern.
                const ruleReg = /(^\/.+\/Rules\/).*(.+\.js)$|(^Rules\/).*(.+\.js)$/;
                if ((errorText.startsWith("\"") && errorText.endsWith("\"")) ||
                    (errorText.startsWith("'") && errorText.endsWith("'"))) {
                    errorText = errorText.slice(1, -1);
                }
                if (ruleReg.test(errorText)) {
                    return true;
                }
            }
        }
        return false;
    }
    checkJsonNodeSync(document, node) {
        return false;
    }
    validateJsonNode(document, node, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    checkJsNodeSync(document, node) {
        return false;
    }
    validateJsNode(document, node, loc) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    cleanup(document, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            return diagnostics;
        });
    }
}
exports.MDKSchemaValidator = MDKSchemaValidator;
function _schemaRequestCallback(fsPath) {
    return SchemaVersionAdapter_1.SchemaVersionHelper.getApplicationSchemaVersion(this.document.uri).then(schemaVersion => {
        return SchemaProvider_1.SchemaProvider.getInstance(schemaVersion).getSchema(fsPath, this.jsonDocument, this.document.uri, _appContext);
    });
}
//# sourceMappingURL=MDKSchemaValidator.js.map