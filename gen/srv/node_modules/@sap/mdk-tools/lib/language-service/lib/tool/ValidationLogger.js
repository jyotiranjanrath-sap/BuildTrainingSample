"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationLogger = void 0;
const mdkLanguageTypes_1 = require("../mdkLanguageTypes");
const VALIDATION_LOG_HEADER = "MDK";
class ValidationLogger {
    constructor(logLevel) {
        this._logLevel = logLevel ? logLevel : mdkLanguageTypes_1.LogLevel.Info;
        this._diagnostics = [];
    }
    debug(message) {
        if (this._checkLevel(mdkLanguageTypes_1.LogLevel.Debug, this._logLevel)) {
            console.log(this._addHeader(message));
        }
    }
    info(message) {
        if (this._checkLevel(mdkLanguageTypes_1.LogLevel.Info, this._logLevel)) {
            console.log(this._addHeader(message));
        }
    }
    warn(message) {
        if (this._checkLevel(mdkLanguageTypes_1.LogLevel.Warn, this._logLevel)) {
            console.log(this._addHeader(message));
        }
    }
    error(message) {
        if (this._checkLevel(mdkLanguageTypes_1.LogLevel.Error, this._logLevel)) {
            console.log(this._addHeader(message));
        }
    }
    logVailationStart(appPath, schemaVersion) {
        this.info('Start validating the application ' +
            appPath + ' with the metadata schema supported in schema version ' + schemaVersion);
    }
    logValidationEnd(errors, warnings) {
        let issues = errors + warnings;
        let message = 'End validation with ' + issues + ' issue(s) - ';
        let errorMessage = errors + ' error(s)';
        let warningMessage = warnings + ' warning(s)';
        message += errorMessage + ', ' + warningMessage + '.';
        if (issues > 0) {
            message += ' Please take a look at PROBLEMS for details.';
        }
        this.info(message);
    }
    logDiagnostic(message) {
        this._diagnostics.push(message);
    }
    outputDiagnostics() {
        let content = '';
        this._diagnostics.forEach(diagonstic => {
            console.log(this._addHeader(diagonstic));
        });
    }
    _checkLevel(currentLevel, configLevel) {
        return currentLevel >= configLevel;
    }
    _addHeader(message) {
        return `[${VALIDATION_LOG_HEADER}] ${message}`;
    }
}
exports.ValidationLogger = ValidationLogger;
//# sourceMappingURL=ValidationLogger.js.map