const _ = require('lodash');

exports.SectionButtonStyle = function(obj, key, output) {
    /*
    SectionButton
    Style migration:
    {
        "Style": "ButtonStyle"
    }
        => 
    {
        "Styles": {
            "Button": "ButtonStyle"
        }
    }
    */
    if (obj && !_.isNil(obj[key])) {
        if (obj["Styles"] && obj["Styles"]["Button"]) {
            return;
        }
        obj.Styles = _.extend(obj.Styles, {
            "Button": obj[key]
        });
        delete obj[key];
        if (output) {
            output.push(`key "${key}" --> key "Styles.Button"`);
        }
    }
};

exports.DataTableColumnItemImage = function(obj, key, output) {
    /*
    DataTableColumnItem
    Image migration:
    {
        "Image": "res://mdk_logo.png",
        "Style": "image-style"
    }
        => 
    {
        "Value": "res://mdk_logo.png",
        "DisplayStyle": "Image",
        "Styles": {
            "Image": "image-style"
        }
    }
    */
    if (obj && !_.isNil(obj[key])) {
        if (obj["Value"]) {
            return;
        }
        obj.Value = obj[key];
        obj.DisplayStyle = "Image";
        delete obj[key];
        if (output) {
            output.push(`key "${key}" --> key "Value"`);
            output.push('add "DisplayStyle": "Image"');
        }

        if (obj.Style && (!obj["Styles"] || !obj["Styles"]["Image"])) {
            obj.Styles = _.extend(obj.Styles, {
                "Image": obj.Style
            });
            if (output) {
                output.push('key "Style" --> key "Styles.Image"');
            }
        }
    }
};

exports.DataTableColumnItemText = function(obj, key, output) {
    /*
    DataTableColumnItem
    Text migration:
    {
        "Text": "Category",
        "Style": "text-style"
    }
        => 
    {
        "Value": "Category",
        "DisplayStyle": "Text",
        "Styles": {
            "Text": "text-style"
        }
    }
    */
    if (obj && !_.isNil(obj[key])) {
        if (obj["Value"]) {
            return;
        }
        obj.Value = obj[key];
        obj.DisplayStyle = "Text";
        delete obj[key];
        if (output) {
            output.push(`key "${key}" --> key "Value"`);
            output.push('add "DisplayStyle": "Text"');
        }

        if (obj.Style && (!obj["Styles"] || !obj["Styles"]["Text"])) {
            obj.Styles = _.extend(obj.Styles, {
                "Text": obj.Style
            });
            if (output) {
                output.push('key "Style" --> key "Styles.Text"');
            }
        }
    }
};

exports.ObjectCellDetailImage = function(obj, key, output) {
    /*
    ObjectCell
    DetailImage migration:
    {
        "DetailImage": "res://mdk_logo.png"
    }
        =>
    {
        "AvatarStack": {
            "Avatars": [
                {
                    "Image": "res://mdk_logo.png"
                }
            ]
        }
    }
    */
    if (obj && !_.isNil(obj[key])) {
        if (_.isNil(obj["AvatarStack"])) {
            obj["AvatarStack"] = {
                "Avatars": [{"Image": obj[key]}]
            };
        } else {
            if (_.isNil(obj["AvatarStack"]["Avatars"])) {
                obj["AvatarStack"]["Avatars"] = [{"Image": obj[key]}];
            } else if (Array.isArray(obj["AvatarStack"]["Avatars"])) {
                if (obj["AvatarStack"]["Avatars"].length === 0) {
                    obj["AvatarStack"]["Avatars"] = [{"Image": obj[key]}];
                } else if (!obj["AvatarStack"]["Avatars"][0]["Image"]) {
                    obj["AvatarStack"]["Avatars"][0] = _.extend(obj["AvatarStack"]["Avatars"][0], {
                        "Image": obj[key]
                    });
                }
            }
        }
        delete obj[key];
        if (output) {
            output.push(`key "${key}" --> key "AvatarStack.Avatars[0].Image"`);
        }
    }
};

exports.ObjectCellDetailImageText = function(obj, key, output) {
    /*
    ObjectCell
    DetailImageText migration:
    {
        "DetailImageText": "Detail Image Text"
    }
        =>
    {
        "AvatarStack": {
            "Avatars": [
                {
                    "ImageText": "Detail Image Text"
                }
            ]
        }
    }
    */
    if (obj && !_.isNil(obj[key])) {
        if (_.isNil(obj["AvatarStack"])) {
            obj["AvatarStack"] = {
                "Avatars": [{"ImageText": obj[key]}]
            };
        } else {
            if (_.isNil(obj["AvatarStack"]["Avatars"])) {
                obj["AvatarStack"]["Avatars"] = [{"ImageText": obj[key]}];
            } else if (Array.isArray(obj["AvatarStack"]["Avatars"])) {
                if (obj["AvatarStack"]["Avatars"].length === 0) {
                    obj["AvatarStack"]["Avatars"] = [{"ImageText": obj[key]}];
                } else if (!obj["AvatarStack"]["Avatars"][0]["ImageText"]) {
                    obj["AvatarStack"]["Avatars"][0] = _.extend(obj["AvatarStack"]["Avatars"][0], {
                        "ImageText": obj[key]
                    });
                }
            }
        }
        delete obj[key];
        if (output) {
            output.push(`key "${key}" --> key "AvatarStack.Avatars[0].ImageText"`);
        }
    }
};

exports.ObjectCellDetailImageIsCircular = function(obj, key, output) {
    /*
    ObjectCell
    DetailImageIsCircular migration:
    {
        "DetailImageIsCircular": false
    }
        =>
    {
        "AvatarStack": {
            "ImageIsCircular": false
        }
    }
    */
    if (obj && !_.isNil(obj[key])) {
        if (obj["AvatarStack"] && !_.isNil(obj["AvatarStack"]["ImageIsCircular"])) {
            return;
        }
        if (obj["AvatarStack"]) {
            obj["AvatarStack"]["ImageIsCircular"] = obj[key];
        } else {
            obj["AvatarStack"] = {
                "ImageIsCircular": obj[key]
            };
        }
        delete obj[key];
        if (output) {
            output.push(`key "${key}" --> key "AvatarStack.ImageIsCircular"`);
        }
    }
},

exports.ObjectHeaderTags = function(obj, key, output) {
    /*
    ObjectHeader
    Tags migration:
    {
        "Tags": [
            "Started", 
            "PM01", 
            "103-Repair", 
            "The Fourth one"
        ]
    }
        => 
    {
        "Tags": [
            {"Text": "Tag1"},
            {"Text": "Tag2"},
            {"Text": "Tag3"},
            {"Text": "Tag4"}
        ]
    }
    */
    var isUpdated = false;
    if (obj && !_.isNil(obj[key])) {
        if (Array.isArray(obj["Tags"]) && obj["Tags"].length > 0) {
            var items = [];
            obj["Tags"].forEach(item => {
                if (typeof item === "string") {
                    items.push({"Text": item});
                    isUpdated = true;
                } else {
                    items.push(item);
                }
            });
            if (isUpdated) {
                if (output) {
                    output.push(`value {"${key}": "${obj["Tags"]}"} --> value {"${key}": "${items}"}`);
                }
                obj["Tags"] = items;
            }            
        }
    }
};

exports.FormCellPage = function(obj, key, output) {
    /*
    FormCell Page migration:
    {
        "Controls": [
            {
                "_Type": "Control.Type.FormCellContainer",
                "_Name": "FormCellContainer0",
                "Sections": [
                    {
                        "Controls": [
                            {
                                "_Type": "Control.Type.FormCell.Note",
                                "_Name": "FormCellNote0",
                                "IsEditable": true,
                                "IsVisible": true,
                                "PlaceHolder": "PlaceHolder",
                                "Enabled": true
                            }
                        ],
                        "Visible": true,
                        "Caption": "Section0"
                    },
                    {
                        "Controls": [
                            {
                                "_Type": "Control.Type.FormCell.Note",
                                "_Name": "FormCellNote1",
                                "IsEditable": true,
                                "IsVisible": true,
                                "PlaceHolder": "PlaceHolder",
                                "Enabled": true
                            }
                        ],
                        "Visible": true,
                        "Caption": "Section1"
                    }
                ]
            }
        ],
        "_Type": "Page",
        "_Name": "FormCellPage",
        "Caption": "FormCellPage"
    }
        => 
    {
        "Controls": [
            {
                "_Type": "Control.Type.SectionedTable",
                "_Name": "FormCellContainer0",
                "Sections": [
                    {
                        "Controls": [
                            {
                                "_Type": "Control.Type.FormCell.Note",
                                "_Name": "FormCellNote0",
                                "IsEditable": true,
                                "IsVisible": true,
                                "PlaceHolder": "PlaceHolder",
                                "Enabled": true
                            }
                        ],
                        "Visible": true,
                        "_Type": "Section.Type.FormCell",
                        "_Name": "SectionFormCell0"
                    },
                    {
                        "Controls": [
                            {
                                "_Type": "Control.Type.FormCell.Note",
                                "_Name": "FormCellNote1",
                                "IsEditable": true,
                                "IsVisible": true,
                                "PlaceHolder": "PlaceHolder",
                                "Enabled": true
                            }
                        ],
                        "Visible": true,
                        "_Type": "Section.Type.FormCell",
                        "_Name": "SectionFormCell1"
                    }
                ]
            }
        ],
        "_Type": "Page",
        "_Name": "FormCellPage",
        "Caption": "FormCellPage"
    }
    */
    if (obj) {
        obj[key] = "Control.Type.SectionedTable";
        if (output) {
            output.push('"Control.Type.FormCellContainer" --> "Control.Type.SectionedTable"');
        }
        if (obj.Sections) {
            if (Array.isArray(obj.Sections)) {
                obj.Sections.forEach((item, index) => {
                    item._Type = "Section.Type.FormCell";
                    item._Name = (obj._Name || "") + "SectionFormCell" + index;
                    delete item.Caption;
                });
            }
        }
    }
};

exports.ToolBar2FioriToolbar = function(obj, key, output) {
    /*
    Migrate ToolBar to FioriToolbar:
    "ToolBar": {
		"Visible": true,
		"Items": [
			{
				"_Name": "ToolbarItem0",
				"_Type": "Control.Type.ToolbarItem",
				"Caption": "ToolbarItem",
				"Clickable": true,
				"Enabled": false,
				"Visible": true,
				"ItemType": "Normal",
				"Icon": "sap-icon://accelerated",
				"SystemItem": "Bookmarks",
				"Width": 100,
                "Style": "style",
                "OnPress": "/TestProject/Rules/test.js"
			}
		]
	}
        => 
    "FioriToolbar": {
		"Visible": true,
		"Items": [
			{
				"_Name": "ToolbarItem0",
				"_Type": "FioriToolbarItem.Type.Button",
				"Title": "ToolbarItem",
				"Enabled": true,
				"Visible": true,
				"ButtonType": "Text",
				"Image": "sap-icon://accelerated",
                "Styles": {
                    "Button": "style",
                },
                "OnPress": "/TestProject/Rules/test.js"
			}
		]
	}
    */
    if (obj) {
        if (output) {
            output.push('"ToolBar" --> "FioriToolbar"');
        }

        let tb = obj[key];
        // remove the existing Toolbar
        delete obj[key];

        let fioriTB = {
            "_Name": "FioriToolbar",
            "_Type": "Control.Type.FioriToolbar"
        };
        if (tb.hasOwnProperty('Visible')) fioriTB.Visible = tb.Visible;

        let fioriItems = [];
        let hasHelperText = false;
        var tbItems;

        if (tb.hasOwnProperty('Items')) {
            tbItems = tb.Items;
        } else if (tb.hasOwnProperty('Controls')) {
            tbItems = tb.Controls;
        }

        if (tbItems) {
            if (tbItems.constructor != Array) {
                // Items is not an array just copy over
                fioriItems = tbItems;
                // console.log(`   Non toolbar item found.  Review after migration`);
            } else {
                for (let i=0; i < tbItems.length; i++) {
                    let btn = tbItems[i];
                    // Check if the item is an object.  If not just copy over
                    if (btn.constructor != Object) {
                        fioriItems.push(btn);
                        // console.log(`   Non toolbar item found.  Review after migration`);
                    } else {
                        // If the object is not a ToolbarItem just copy over
                        if (btn._Type != "Control.Type.ToolbarItem" ) {
                            fioriItems.push(btn);
                            // console.log(`   Non toolbar item found.  Review after migration`);
                            continue;
                        }

                        // If the btn is the first not clickable button set as helper text in Fiori Toolbar
                        if (!hasHelperText && btn.hasOwnProperty('Clickable') && !btn.Clickable) {
                            hasHelperText = true;
                            fioriTB.HelperText = btn.Caption;
                            continue;
                        }

                        // If the btn is a SystemItem FlexibleSpace or FixedSpace do not migrate
                        if (btn.hasOwnProperty('SystemItem') && (btn['SystemItem'] === 'FixedSpace' || btn['SystemItem'] === 'FlexibleSpace')) {
                            continue;
                        }

                        // Otherwise migrate the btn
                        let newBtn = {
                            "_Type": "FioriToolbarItem.Type.Button"
                        };
                        if (btn.hasOwnProperty('_Name')) newBtn._Name = btn._Name;
                        if (btn.hasOwnProperty('Visible')) newBtn.Visible = btn.Visible;
                        if (btn.hasOwnProperty('Caption')) newBtn.Title = btn.Caption;
                        if (btn.hasOwnProperty('Style') && btn.Style != "") newBtn.Styles = { "Button": btn.Style };
                        if (btn.hasOwnProperty('OnPress')) newBtn.OnPress = btn.OnPress;
                        if (btn.hasOwnProperty('Icon')) newBtn.Image = btn.Icon;
                        if (btn.hasOwnProperty('Enabled')) newBtn.Enabled = btn.Enabled;
                        if (btn.hasOwnProperty('Clickable')) newBtn.Enabled = btn.Clickable;
                        if (btn.hasOwnProperty('ItemType')) {
                            switch(btn.ItemType) {
                                case "Normal":
                                    newBtn.ButtonType = "Text";
                                    break;
                                case "Button":
                                    newBtn.ButtonType = "Primary";
                                    break;
                                default:
                                    newBtn.ButtonType = btn.ItemType;
                            }
                        }
                        if (btn.hasOwnProperty('DataSubscriptions')) {
                            // console.log(`   Unsupported DataSubscriptions found on toolbar button`);
                            newBtn.DataSubscriptions = btn.DataSubscriptions;
                        }
                        fioriItems.push(newBtn);
                    }
                }
            }
            fioriTB.Items = fioriItems;
        }

        // Add the fiori toolbar back to the page
        obj.FioriToolbar = fioriTB;
    }
}