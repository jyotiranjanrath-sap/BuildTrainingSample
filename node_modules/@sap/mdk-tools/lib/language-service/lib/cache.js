"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = exports.Cache = void 0;
const LanguageHelper_1 = require("./common/LanguageHelper");
const MDKApplicationDelegate_1 = require("./export/MDKApplicationDelegate");
class Cache {
    constructor() {
        this._appPages = [];
        this._appFragments = [];
        this._actionResults = [];
        this._i18nKeys = {
            keys: null,
            i18nError: null
        };
        this._appInfo = new Map();
    }
    getPages(anchorDocumentUri, documentProvider) {
        return __awaiter(this, void 0, void 0, function* () {
            let appBasePath = yield this._getAppBasePath(anchorDocumentUri, documentProvider);
            if (!appBasePath)
                return null;
            return this._appPages[appBasePath];
        });
    }
    getFragments(anchorDocumentUri, documentProvider) {
        return __awaiter(this, void 0, void 0, function* () {
            let appBasePath = yield this._getAppBasePath(anchorDocumentUri, documentProvider);
            if (!appBasePath)
                return null;
            return this._appFragments[appBasePath];
        });
    }
    getActionResults(anchorDocumentUri, documentProvider) {
        return __awaiter(this, void 0, void 0, function* () {
            let appBasePath = yield this._getAppBasePath(anchorDocumentUri, documentProvider);
            if (!appBasePath)
                return null;
            return this._actionResults[appBasePath];
        });
    }
    getI18nKeys() {
        return this._i18nKeys;
    }
    getAppInfo(sPath) {
        return this._appInfo.get(sPath);
    }
    setAppInfo(sPath, appInfo) {
        this._appInfo.set(sPath, appInfo);
    }
    clear() {
        this._appPages = [];
        this._appFragments = [];
        this._actionResults = [];
        this._i18nKeys.keys = null;
        this._i18nKeys.i18nError = null;
    }
    refresh(anchorDocumentUri, documentProvider, referenceApps) {
        return __awaiter(this, void 0, void 0, function* () {
            this.clear();
            let appBasePath = yield this._getAppBasePath(anchorDocumentUri, documentProvider);
            if (appBasePath) {
                this._appPages[appBasePath] = yield LanguageHelper_1.LanguageHelper.getAllPages(anchorDocumentUri, documentProvider, referenceApps);
                this._appFragments[appBasePath] = yield LanguageHelper_1.LanguageHelper.getAllFragments(anchorDocumentUri, documentProvider, referenceApps);
                this._actionResults[appBasePath] = yield LanguageHelper_1.LanguageHelper.getAllActionResults(anchorDocumentUri, documentProvider, referenceApps);
            }
            return this._getI18nKeys(anchorDocumentUri, documentProvider, referenceApps).then(i18nKeys => {
                this._i18nKeys.keys = i18nKeys;
            }, error => {
                this._i18nKeys.i18nError = error;
            });
        });
    }
    _getAppBasePath(anchorDocumentUri, documentProvider) {
        return __awaiter(this, void 0, void 0, function* () {
            let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(anchorDocumentUri, documentProvider);
            let appInfo = yield baseAppDelegate.getApplicationInfo();
            return appInfo ? appInfo.basePath : null;
        });
    }
    _getI18nKeys(anchorDocumentUri, documentProvider, referenceApps) {
        return __awaiter(this, void 0, void 0, function* () {
            let appDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(anchorDocumentUri, documentProvider, referenceApps);
            return appDelegate.getDefaultI18nContent().then(i18nContent => {
                let PropertiesParser = require('properties-parser');
                return PropertiesParser.parse(i18nContent);
            });
        });
    }
}
exports.Cache = Cache;
exports.cache = new Cache();
//# sourceMappingURL=cache.js.map