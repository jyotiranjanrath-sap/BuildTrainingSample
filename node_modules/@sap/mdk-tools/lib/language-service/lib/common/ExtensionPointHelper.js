"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionPointHelper = void 0;
const _ = require("lodash");
const CONTROL_CONTAINER = [
    {
        "_Type": "Control.Type.SectionedTable",
        "Items": ["Sections"]
    },
    {
        "_Type": "Control.Type.FormCellContainer",
        "Items": ["Sections"]
    },
    {
        "_Type": "Control.Type.Tabs",
        "Items": ["Items"]
    },
    {
        "_Type": "Control.Type.BottomNavigation",
        "Items": ["Items"]
    },
    {
        "_Type": "Control.Type.SideDrawer",
        "Items": ["Sections"]
    },
    {
        "_Type": "Section.Type.AnalyticCardCollection",
        "Items": ["AnalyticCards"]
    },
    {
        "_Type": "Section.Type.ButtonTable",
        "Items": ["Buttons"] //no _Type
    },
    {
        "_Type": "Section.Type.ContactCell",
        "Items": ["ContactCells"]
    },
    {
        "_Type": "Control.Type.FormCell",
        "Items": ["Controls"]
    },
    {
        "_Type": "Control.Type.ImageCollection",
        "Items": ["ImageCells"] //no _Name, no _Type
    },
    {
        "_Type": "Section.Type.KeyValue",
        "Items": ["KeyAndValues"]
    },
    {
        "_Type": "Section.Type.KPISection",
        "Items": ["KPIItems"]
    },
    {
        "_Type": "Section.Type.ObjectCardCollection",
        "Items": ["Cards"]
    },
    {
        "_Type": "Section.Type.ObjectCollection",
        "Items": ["ObjectCells"]
    },
    {
        "_Type": "Section.Type.ObjectTable",
        "Items": ["ObjectCells"]
    },
    {
        "_Type": "Section.Type.SimplePropertyCollection",
        "Items": ["SimplePropertyCells"]
    },
    {
        "_Type": "Section.Type.Timeline",
        "Items": ["Cells"]
    },
    {
        "_Type": "Section.Type.TimelinePreview",
        "Items": ["Cells"]
    }
];
const EXTENSION_POINT = "_ExtensionPoint";
const EXTENSION_POINT_COMMON = {
    "default": false,
    "type": "boolean"
};
const EXTENSION_POINT_ARRAY = {
    "type": "array",
    "items": {
        "type": "string",
        "enum": [
            "Reorder",
            "Remove",
            "InsertBegin",
            "InsertEnd",
            "InsertAny"
        ]
    }
};
const EXTENSION_POINT_ARRAY_ROOT = {
    "anyOf": [
        EXTENSION_POINT_COMMON,
        EXTENSION_POINT_ARRAY
    ]
};
const EXTENSION_POINT_OBJECT = {
    "type": "array",
    "items": {
        "type": "string",
        "enum": [
            "Add",
            "Remove"
        ]
    }
};
const EXTENSION_POINT_OBJECT_ROOT = {
    "anyOf": [
        EXTENSION_POINT_COMMON,
        EXTENSION_POINT_OBJECT
    ]
};
const EMPTY_EXTENSION_POINT = {
    "properties": {},
    "type": "object"
};
const COMMON_EXTENSION_POINT_FILES = ['action', 'app', 'service'];
class ExtensionPointHelper {
    constructor() {
    }
    addExtensionPoints(fileType, schemas) {
        if (fileType === 'page') {
            return this.addPageExtensionPoints(schemas);
        }
        else if (COMMON_EXTENSION_POINT_FILES.includes(fileType)) {
            if (schemas[0]) {
                this.applyControlRootExtensionPoints(schemas[0]["properties"], schemas[0]["properties"]);
            }
            if (schemas[1]) {
                this.applyControlRootExtensionPoints(schemas[1]["properties"], schemas[1]["properties"]);
            }
            return schemas;
        }
        else {
            return schemas;
        }
    }
    addPageExtensionPoints(schemas) {
        let pageSchema, controlSchema;
        if (schemas[0]) {
            pageSchema = this.addPageControlExtensionPoints(schemas[0]);
        }
        if (schemas[1]) {
            controlSchema = this.addControlExtensionPoints(schemas[1]);
        }
        return [pageSchema, controlSchema];
    }
    addPageControlExtensionPoints(schema) {
        if (schema && schema.properties) {
            if (!this._pageExtensionPointSchema) {
                let filterProperties = ["Controls"];
                let arrayTypeProperties = ["DataSubscriptions", "Result"];
                let arrayRootProperties = ["ActionBar", "ToolBar"];
                this._pageExtensionPointSchema = {
                    "properties": {
                        [EXTENSION_POINT]: {
                            "properties": {},
                            "type": "object"
                        }
                    }
                };
                for (let key in schema.properties) {
                    if (schema.properties.hasOwnProperty(key)) {
                        if (key.startsWith("_") || filterProperties.includes(key)) {
                            continue;
                        }
                        else if (arrayTypeProperties.includes(key)) {
                            this._pageExtensionPointSchema["properties"][EXTENSION_POINT]["properties"][key] = EXTENSION_POINT_ARRAY_ROOT;
                        }
                        else if (arrayRootProperties.includes(key)) {
                            this._pageExtensionPointSchema["properties"][key] = {
                                "properties": {
                                    [EXTENSION_POINT]: {
                                        "properties": {
                                            "Items": EXTENSION_POINT_ARRAY_ROOT
                                        },
                                        "type": "object"
                                    }
                                }
                            };
                        }
                        else {
                            this._pageExtensionPointSchema["properties"][EXTENSION_POINT]["properties"][key] = EXTENSION_POINT_ARRAY_ROOT;
                        }
                    }
                }
            }
            _.merge(schema, this._pageExtensionPointSchema);
        }
        return schema;
    }
    addControlExtensionPoints(schema) {
        let _this = this;
        if (schema.properties.Controls) {
            _this.applyAControlExtensionPoints(schema.properties.Controls);
        }
        return schema;
    }
    applyAControlExtensionPoints(properties) {
        let _this = this;
        if (Array.isArray(properties)) {
            properties.forEach(item => {
                _this.applyAControlExtensionPoints(item);
            });
        }
        else if (properties["type"] === "array" && properties["items"]) {
            _this.applyAControlExtensionPoints(properties["items"]);
        }
        else if (properties["anyOf"]) {
            _this.applyAControlExtensionPoints(properties["anyOf"]);
        }
        else if (properties["allOf"]) {
            //_this.applyAControlExtensionPoints(properties["anyOf"]);
            let mergeProperties = {};
            properties["allOf"].forEach(p => mergeProperties = _.merge(mergeProperties, p));
            properties["allOf"].push(_this.getControlRootExtensionPoints(mergeProperties["properties"]));
        }
        else if (properties["if"] && properties["then"]) {
            _this.applyAControlExtensionPoints(properties["then"]);
            if (properties["else"]) {
                _this.applyAControlExtensionPoints(properties["else"]);
            }
        }
        else if (properties["properties"]) {
            _this.applyAControlExtensionPoints(properties["properties"]);
        }
        if (properties["_Type"] && properties["_Name"]) {
            _this.applyControlRootExtensionPoints(properties, properties);
            for (let key in properties) {
                if (properties.hasOwnProperty(key) && _this.isValidProperty(key)) {
                    if (_this.isControlContainer(properties["_Type"], key)) {
                        _this.applyAControlExtensionPoints(properties[key]);
                    }
                }
            }
        }
    }
    applyControlRootExtensionPoints(rootProperties, properties, parentKey) {
        let _this = this;
        rootProperties[EXTENSION_POINT] = rootProperties[EXTENSION_POINT] ? rootProperties[EXTENSION_POINT] : EMPTY_EXTENSION_POINT;
        for (let key in properties) {
            if (properties.hasOwnProperty(key) && _this.isValidProperty(key)) {
                const extKey = parentKey ? `${parentKey}/${key}` : key;
                if (_this.isArrayType(properties[key])) {
                    rootProperties[EXTENSION_POINT]["properties"][extKey] = EXTENSION_POINT_ARRAY_ROOT;
                }
                else if (_this.isObjectType(properties[key])) {
                    rootProperties[EXTENSION_POINT]["properties"][extKey] = EXTENSION_POINT_OBJECT_ROOT;
                    _this.applyObjectItemKeys(rootProperties, properties[key], extKey);
                }
                else {
                    rootProperties[EXTENSION_POINT]["properties"][extKey] = EXTENSION_POINT_COMMON;
                }
            }
        }
    }
    applyObjectItemKeys(rootProperties, controlSchema, parentKey) {
        let _this = this;
        if (controlSchema["properties"] && !controlSchema["properties"]["_Type"]) {
            _this.applyControlRootExtensionPoints(rootProperties, controlSchema["properties"], parentKey);
        }
        else if (controlSchema["anyOf"]) {
            controlSchema["anyOf"].forEach(item => {
                _this.applyObjectItemKeys(rootProperties, item, parentKey);
            });
        }
        else if (controlSchema["allOf"]) {
            let oProperties = {};
            controlSchema["allOf"].forEach(item => {
                if (item.type === "object" && item.properties) {
                    oProperties = _.merge(oProperties, item.properties);
                }
            });
            _this.applyObjectItemKeys(rootProperties, { properties: oProperties }, parentKey);
        }
        else if (controlSchema["if"]) {
            _this.applyObjectItemKeys(rootProperties, controlSchema["then"], parentKey);
            _this.applyObjectItemKeys(rootProperties, controlSchema["else"], parentKey);
        }
    }
    getControlRootExtensionPoints(properties) {
        let _this = this;
        let newProperties = {
            "properties": {
                [EXTENSION_POINT]: {
                    "properties": {},
                    "type": "object"
                }
            }
        };
        for (let key in properties) {
            if (properties.hasOwnProperty(key) && _this.isValidProperty(key)) {
                if (_this.isArrayType(properties[key])) {
                    newProperties["properties"][EXTENSION_POINT]["properties"][key] = EXTENSION_POINT_ARRAY_ROOT;
                }
                else if (_this.isObjectType(properties[key])) {
                    newProperties["properties"][EXTENSION_POINT]["properties"][key] = EXTENSION_POINT_OBJECT_ROOT;
                    //todo
                    _this.applyObjectItemKeys(newProperties["properties"], properties[key], key);
                }
                else {
                    newProperties["properties"][EXTENSION_POINT]["properties"][key] = EXTENSION_POINT_COMMON;
                }
            }
        }
        return newProperties;
    }
    isArrayType(property) {
        let _this = this;
        if (property["type"]) {
            if (Array.isArray(property["type"])) {
                return property["type"].includes("array");
            }
            else {
                return property["type"] === "array";
            }
        }
        else if (property["anyOf"]) {
            return property["anyOf"].some(item => _this.isArrayType(item));
        }
        return false;
    }
    isObjectType(property) {
        let _this = this;
        if (property["type"]) {
            return property["type"] === "object";
        }
        else if (property["anyOf"]) {
            return property["anyOf"].some(item => _this.isObjectType(item));
        }
        else if (property["allOf"]) {
            return property["allOf"].some(item => _this.isObjectType(item));
        }
        else if (property["if"]) {
            return _this.isObjectType(property["then"]) || _this.isObjectType(property["else"]);
        }
        return false;
    }
    isControlContainer(controlType, controlKey) {
        let item = CONTROL_CONTAINER.find(item => {
            if (controlType["const"]) {
                return item._Type === controlType["const"] && item.Items.includes(controlKey);
            }
            else if (controlType["pattern"]) {
                return item._Type.match(controlType["pattern"]) && item.Items.includes(controlKey);
            }
        });
        return !!item;
    }
    isValidProperty(name) {
        return !name.startsWith("_") && name !== EXTENSION_POINT;
    }
}
exports.ExtensionPointHelper = ExtensionPointHelper;
//# sourceMappingURL=ExtensionPointHelper.js.map