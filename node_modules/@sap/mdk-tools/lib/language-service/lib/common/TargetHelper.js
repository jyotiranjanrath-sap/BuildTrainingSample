"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetHelper = void 0;
const path = require("path");
var TargetHelper;
(function (TargetHelper) {
    let parser = require('./QueryOptionParser');
    function isSupportEntityString(entity) {
        if (entity.endsWith('.js')) {
            // e.g. "EntitySet": "/SAPAssetManager/Rules/Classification/Characteristics/Update/CharacteristicsUpdateEntitySet.js"
            return false;
        }
        else if (entity.indexOf('#ClientData') > -1) {
            // e.g. "EntitySet" : "#ClientData/#Property:addressEntity"
            return false;
        }
        else if (entity.indexOf('#Property:') > -1) {
            // e.g. "EntitySet" : "{{#Property:@odata.id}}/Tasks"
            return false;
        }
        else if (entity.indexOf('@odata.readLink') > -1) {
            // e.g. "EntitySet": "{{#Property:@odata.readLink}}/Classes"
            return true;
        }
        else if (entity.startsWith('{')) {
            // EntitySet value is a binding
            return false;
        }
        return true;
    }
    TargetHelper.isSupportEntityString = isSupportEntityString;
    function isEntitySetLiteralValueNode(node) {
        return _isPropertyValueNode(node, 'EntitySet') && _isLiteralNodeValue(node.value);
    }
    TargetHelper.isEntitySetLiteralValueNode = isEntitySetLiteralValueNode;
    // e.g.
    // 1. â€œReadLink": "SystemStatuses('I0100')"
    // 2. "ReadLink": "MyEquipments('#Property:Item/#Property:ReturnValue')"
    function isReadLinkEntityLiteralSetValue(node) {
        return _isPropertyValueNode(node, 'ReadLink') && _isLiteralNodeValue(node.value);
    }
    TargetHelper.isReadLinkEntityLiteralSetValue = isReadLinkEntityLiteralSetValue;
    function getTargetSiblingNodeValue(node, name) {
        if (node && node.parent && node.parent.parent && node.parent.parent.parent &&
            node.parent.parent.parent.keyNode && ["Target", "DesignTimeTarget"].indexOf(node.parent.parent.parent.keyNode.value) > -1) {
            let targetProperties = node.parent.parent.parent.valueNode.children;
            if (targetProperties) {
                let foundProperty = targetProperties.find(targetProperty => {
                    return (targetProperty.keyNode && targetProperty.keyNode.value === name);
                });
                if (foundProperty) {
                    return foundProperty.valueNode.value;
                }
            }
        }
    }
    TargetHelper.getTargetSiblingNodeValue = getTargetSiblingNodeValue;
    function getExpandedProperties(target) {
        if (target && target.QueryOptions && typeof target.QueryOptions === 'string') {
            try {
                let ast = parser.parse(target.QueryOptions, { ast: {} });
                if (ast && ast.$expand) {
                    return ast.$expand;
                }
            }
            catch (err) {
                return null;
            }
        }
        return null;
    }
    TargetHelper.getExpandedProperties = getExpandedProperties;
    function getServiceXmlReference(serviceReference) {
        if (serviceReference) {
            let lastDotPos = serviceReference.lastIndexOf('.');
            let lastSlashPos = serviceReference.lastIndexOf('/');
            if (lastDotPos > lastSlashPos && lastSlashPos > 0) {
                let serviceName = serviceReference.substring(lastSlashPos + 1, lastDotPos);
                let serviceBase = serviceReference.substring(0, lastSlashPos);
                return `${serviceBase}/.${serviceName}.xml`;
            }
        }
        else {
            return '';
        }
    }
    TargetHelper.getServiceXmlReference = getServiceXmlReference;
    function getServiceXmlFullPath(serviceFullPath) {
        let serviceName = path.basename(serviceFullPath, '.service');
        let serviceXmlFullPath = path.join(path.dirname(serviceFullPath), `.${serviceName}.xml`);
        return serviceXmlFullPath;
    }
    TargetHelper.getServiceXmlFullPath = getServiceXmlFullPath;
})(TargetHelper = exports.TargetHelper || (exports.TargetHelper = {}));
function _isPropertyValueNode(node, name) {
    return (node && node.parent && node.parent.keyNode &&
        node.parent.keyNode.value === name &&
        node.parent.valueNode === node);
}
function _isLiteralNodeValue(nodeValue) {
    nodeValue = nodeValue || '';
    return !(nodeValue.startsWith('/') || nodeValue.startsWith('#') || nodeValue.startsWith('$') || nodeValue.startsWith('{'));
}
//# sourceMappingURL=TargetHelper.js.map