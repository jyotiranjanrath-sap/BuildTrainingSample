"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadStreamCompletion = void 0;
const LanguageHelper_1 = require("../../common/LanguageHelper");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
class DownloadStreamCompletion {
    constructor(documentProvider) {
        this._overwriteRange = null;
        this._documentProvider = documentProvider;
    }
    initContext(document) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._overwriteRange = null;
            this._appContext = context;
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve([]);
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            if (!LanguageHelper_1.LanguageHelper.isPropertiesStringValue(node)) {
                return Promise.resolve([]);
            }
            return this._provideCompletionItems(document, position, node).then((items) => {
                if (!items) {
                    return [];
                }
                return items.map((item) => {
                    if (this._overwriteRange) {
                        item.filterText = item.insertText;
                        item.textEdit = mdkLanguageTypes_1.TextEdit.replace(this._overwriteRange, item.insertText);
                    }
                    else {
                        let insertText = item.label;
                        if (item.insertText) {
                            insertText = item.insertText;
                        }
                        item.textEdit = mdkLanguageTypes_1.TextEdit.insert(position, insertText);
                    }
                    return item;
                });
            });
        });
    }
    _provideCompletionItems(document, position, node) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initContext(document);
            let streamProperties = yield LanguageHelper_1.LanguageHelper.getStreamProperties(document.uri, node, this._documentProvider, this._appContext);
            if (streamProperties) {
                let result = [];
                streamProperties.forEach(item => result.push({ label: item }));
                return result;
            }
            return Promise.resolve([]);
        });
    }
}
exports.DownloadStreamCompletion = DownloadStreamCompletion;
//# sourceMappingURL=DownloadStreamCompletion.js.map