"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OverrideActionCompletion = void 0;
const _ = require("lodash");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const SchemaVersionAdapter_1 = require("../../tool/SchemaVersionAdapter");
const SchemaProvider_1 = require("../schema/SchemaProvider");
class OverrideActionCompletion {
    constructor(documentProvider) {
        this._overwriteRange = null;
        this._documentProvider = documentProvider;
    }
    initContext(document) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._overwriteRange = null;
            this._appContext = context;
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve([]);
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            if (this._isPropertyValueNode(node, 'Name')) {
                return this.getOverrideActionObject(document, node).then((items) => {
                    if (!items) {
                        return [];
                    }
                    return items;
                });
            }
            else {
                return Promise.resolve([]);
            }
        });
    }
    _isPropertyValueNode(node, name) {
        return (node && node.parent && node.parent.keyNode && !node.parent.keyNode.value &&
            node.parent.parent && node.parent.parent.parent &&
            node.parent.parent.parent.keyNode && node.parent.parent.parent.keyNode.value === 'Properties' &&
            node.parent.parent.parent.parent && node.parent.parent.parent.parent.properties &&
            node.parent.parent.parent.parent.properties[0] && node.parent.parent.parent.parent.properties[0].keyNode.value === name &&
            node.parent.parent.parent.parent.parent.keyNode.value.startsWith('On'));
    }
    _getOverrideActionName(node) {
        let actionName;
        while (node) {
            node = node.parent;
            if (node && node.type === 'object' && node.properties) {
                for (let i = 0; i < node.properties.length; i++) {
                    let property = node.properties[i];
                    if (this._isStringASTNodeWithName(property.keyNode, 'Name')) {
                        if (property.valueNode && property.valueNode.type === 'string' && property.valueNode.value) {
                            actionName = property.valueNode.value;
                            if (!_.isEmpty(actionName)) {
                                return actionName;
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
    getOverrideActionObject(document, node) {
        return __awaiter(this, void 0, void 0, function* () {
            let actionName = this._getOverrideActionName(node);
            if (actionName) {
                let referenceApps;
                if (this._appContext) {
                    referenceApps = this._appContext.referenceApps;
                }
                let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(document.uri, this._documentProvider, referenceApps);
                let overrideActionFullPath = yield baseAppDelegate.toFileFullPath(actionName);
                let actionType = baseAppDelegate.getSchemaTypeByFilePath(overrideActionFullPath);
                if (actionType) {
                    let schemaVersion = yield SchemaVersionAdapter_1.SchemaVersionHelper.getApplicationSchemaVersion(document.uri);
                    let overrideActionSchema = yield SchemaProvider_1.SchemaProvider.getInstance(schemaVersion).getSchemaByActionType(actionType);
                    if (overrideActionSchema && overrideActionSchema.properties) {
                        let result = [];
                        let item;
                        for (item in overrideActionSchema.properties) {
                            if (item !== "_Type") {
                                result.push({ label: item });
                            }
                        }
                        return result;
                    }
                }
                return Promise.resolve([]);
            }
            return Promise.resolve([]);
        });
    }
    _isStringASTNodeWithName(node, name) {
        if (node && node.type === 'string' && node.value === name) {
            return true;
        }
        return false;
    }
}
exports.OverrideActionCompletion = OverrideActionCompletion;
//# sourceMappingURL=OverrideActionCompletion.js.map