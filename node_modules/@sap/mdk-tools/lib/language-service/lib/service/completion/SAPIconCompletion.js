"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SAPIconCompletion = void 0;
const LanguageHelper_1 = require("../../common/LanguageHelper");
const LogUtil_1 = require("../../common/LogUtil");
const SAPIconMap_1 = require("../../common/SAPIconMap");
const sapIconPrefix = "sap-icon://";
class SAPIconCompletion {
    constructor() {
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._appContext = context;
            if (!this.sapIcons || this.sapIcons.length === 0) {
                this.sapIcons = Object.keys(SAPIconMap_1.SAPIconMap).filter(value => !(parseInt(value) >= 0)).map(icon => { return { label: icon }; });
            }
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            let that = this;
            let found = false;
            return new Promise((resolve, reject) => {
                let esprima = require('esprima');
                esprima.parseModule(document.getText(), {
                    loc: true,
                    tokens: true,
                    comment: true,
                    tolerant: true
                }, function (node) {
                    if (!found && node.type === "Literal" && node.value && node.value.startsWith(sapIconPrefix)) {
                        found = true;
                    }
                });
                if (found) {
                    resolve(that.sapIcons);
                }
                else {
                    resolve([]);
                }
            }).catch(error => {
                LogUtil_1.Log.debug(error);
                return Promise.resolve([]);
            });
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            if (!node || LanguageHelper_1.LanguageHelper.isKey(node)) {
                return Promise.resolve([]);
            }
            if (node.type === "string" && node.value && node.value.startsWith(sapIconPrefix)) {
                return Promise.resolve(this.sapIcons);
            }
        });
    }
}
exports.SAPIconCompletion = SAPIconCompletion;
//# sourceMappingURL=SAPIconCompletion.js.map