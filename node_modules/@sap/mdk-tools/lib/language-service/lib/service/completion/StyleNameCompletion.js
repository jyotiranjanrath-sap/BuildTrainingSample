"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StyleNameCompletion = void 0;
const path = require("path");
const PathUtil_1 = require("../../common/PathUtil");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const _ = require("lodash");
let PropertiesForStyleName = [
    { SchemaType: "Action.Type.SetTheme", PropertyName: "Theme" }
];
let Themes = ["dark", "light"];
class StyleNameCompletion {
    constructor(documentProvider) {
        this._documentProvider = documentProvider;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._appContext = context;
        });
    }
    provideCompletionItemsForJS(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve([]);
        });
    }
    provideCompletionItemsForJSON(document, position, jsonDocument, matchingSchemas) {
        return __awaiter(this, void 0, void 0, function* () {
            let referenceApps;
            if (this._appContext) {
                referenceApps = this._appContext.referenceApps;
            }
            let offset = document.offsetAt(position);
            let node = jsonDocument.getNodeFromOffset(offset);
            let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(document.uri, this._documentProvider, referenceApps);
            let currFileFullPath = PathUtil_1.PathUtil.tryParseUri(document.uri);
            let schemaType = baseAppDelegate.getSchemaTypeByFilePath(currFileFullPath);
            if (!this._isMathingProperty(node, schemaType)) {
                return Promise.resolve([]);
            }
            let appInfo = yield baseAppDelegate.getApplicationInfo();
            let stylesFolderPath = path.join(appInfo.basePath, PathUtil_1.PathUtil.getFileFolder(PathUtil_1.MDKFileType.Style));
            let stylesFilesPaths = yield this._documentProvider.getChildrenFullPaths(stylesFolderPath, true);
            let stylesFileNames = [];
            if (stylesFilesPaths && stylesFilesPaths.length > 0) {
                stylesFilesPaths.forEach((item) => {
                    let extName = path.extname(item);
                    if (extName.toLowerCase() === ".less" && !this._checkIfThemeFiles(item)) {
                        stylesFileNames.push({ label: PathUtil_1.PathUtil.getFileShortName(item) });
                    }
                });
            }
            return Promise.resolve(stylesFileNames);
        });
    }
    _checkIfThemeFiles(sFileFullPath) {
        let sFileName = PathUtil_1.PathUtil.getFileShortName(sFileFullPath);
        for (var i = 0; i < Themes.length; i++) {
            if (_.endsWith(sFileName, "." + Themes[i]))
                return true;
        }
        return false;
    }
    _isMathingProperty(node, schemaType) {
        if (node &&
            node.parent &&
            node.parent.keyNode &&
            node.parent.keyNode.value) {
            for (let i = 0; i < PropertiesForStyleName.length; i++) {
                if (PropertiesForStyleName[i].SchemaType === schemaType &&
                    PropertiesForStyleName[i].PropertyName === node.parent.keyNode.value) {
                    return true;
                }
            }
        }
        return false;
    }
}
exports.StyleNameCompletion = StyleNameCompletion;
//# sourceMappingURL=StyleNameCompletion.js.map