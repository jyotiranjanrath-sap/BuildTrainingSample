"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaFileProvider = void 0;
const AdmZip = require("adm-zip");
const file = require("fs");
const path = require("path");
const LanguageHelper_1 = require("../../common/LanguageHelper");
const LogUtil_1 = require("../../common/LogUtil");
class SchemaFileProvider {
    constructor(schemaVersion) {
        this._mapSchemas = {};
        this._schemaVersion = schemaVersion;
        let zipFilePath = this._getZippedSchemaFilePath(schemaVersion);
        LogUtil_1.Log.debug('the zip file path is: ' + zipFilePath);
        if (file.existsSync(zipFilePath)) {
            this._files = this._populateFilesFromZipFile(zipFilePath);
            this._actionTypes = this._getActionTypes();
        }
        else {
            throw new Error(`The zipped schema file ${zipFilePath} is not exist. Make sure if Debug App Root is correct.`);
        }
    }
    getSchemaVersion() {
        return this._schemaVersion;
    }
    getActionTypes() {
        if (this._actionTypes) {
            return this._actionTypes;
        }
        else {
            Promise.reject('There is no any action types found.');
        }
    }
    getSchema(schemaPath) {
        if (this._files) {
            return this._files.then(files => {
                let tempFiles = files;
                let parts = schemaPath.replace(/\\/g, '/').split('/');
                for (let i = 0; i < parts.length - 1; i++) {
                    tempFiles = tempFiles[parts[i]];
                }
                let content = tempFiles[parts[parts.length - 1]];
                if (typeof content === 'string') {
                    LogUtil_1.Log.debug(`the content of ${schemaPath} is: ${content}`);
                    return content;
                }
                else {
                    LogUtil_1.Log.debug('cannot find schema of ' + schemaPath);
                    return null;
                }
            });
        }
        else {
            return Promise.reject('There is no any schema files found.');
        }
    }
    getSchemas() {
        let _this = this;
        if (this._schemaVersion) {
            return new Promise((resolve, reject) => {
                if (!_this._mapSchemas[_this._schemaVersion]) {
                    let zipFilePath = _this._getZippedSchemaFilePath(_this._schemaVersion);
                    try {
                        let zipper = new AdmZip(zipFilePath);
                        _this._mapSchemas[_this._schemaVersion] = {};
                        var entries = zipper.getEntries();
                        entries.forEach(function (entry) {
                            let fileName = entry.entryName;
                            if (!entry.isDirectory && _this._isFileAvailable(fileName)) {
                                let zipContent = entry.getData().toString('utf8');
                                _this._mapSchemas[_this._schemaVersion][fileName] = zipContent;
                            }
                        });
                    }
                    catch (error) {
                        reject(`The zipped file ${zipFilePath} is invalid with ${error}.`);
                    }
                }
                resolve(_this._mapSchemas[_this._schemaVersion]);
            });
        }
        else {
            return Promise.reject("No schemaVersion is provided");
        }
    }
    _isFileAvailable(fileName) {
        return fileName.endsWith(".schema") || fileName.endsWith(".json");
    }
    _getActionTypes() {
        return this._files.then(files => {
            let actions = files['Action'];
            return this._getTypesFromActionObject(actions, 'Action.Type.');
        });
    }
    _getTypesFromActionObject(action, prefix) {
        let types = [];
        for (let id in action) {
            let key = path.basename(id, '.schema');
            let value = action[id];
            if (typeof value === 'string') {
                types.push(prefix + key);
            }
            else {
                types.push(...this._getTypesFromActionObject(value, prefix + key + '.'));
            }
        }
        return types;
    }
    _getZippedSchemaFilePath(schemaVersion) {
        return path.join(LanguageHelper_1.LanguageHelper.getSchemaRootPath(), schemaVersion, 'Schemas.zip');
    }
    _populateFilesFromZipFile(zipFilePath) {
        let _this = this;
        let files = {};
        return new Promise((resolve, reject) => {
            try {
                let zipper = new AdmZip(zipFilePath);
                var entries = zipper.getEntries();
                entries.forEach(function (entry) {
                    if (!entry.isDirectory) {
                        _this._putInFiles(entry.entryName, entry.getData().toString('utf8'), files);
                    }
                });
                resolve(files);
            }
            catch (error) {
                reject(`The zipped file ${zipFilePath} is invalid with ${error}.`);
            }
        });
    }
    // path could be 'Schemas/Action/' or 'Schemas/Action/Message.schema'
    _putInFiles(path, content, files) {
        let parts = path.split('/');
        // staring from i in order to get ride of 'Schemas'
        let tempFiles = files;
        for (let i = 1; i < parts.length - 1; i++) {
            let part = parts[i];
            if (!tempFiles[part]) {
                tempFiles[part] = {};
            }
            tempFiles = tempFiles[part];
        }
        tempFiles[parts[parts.length - 1]] = content;
    }
}
exports.SchemaFileProvider = SchemaFileProvider;
//# sourceMappingURL=SchemaFileProvider.js.map