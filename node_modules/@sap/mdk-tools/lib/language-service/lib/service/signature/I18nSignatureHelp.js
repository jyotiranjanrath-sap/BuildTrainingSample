"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.I18nSignatureHelp = void 0;
const esprima = require("esprima");
const jsonParser_1 = require("vscode-json-languageservice/lib/umd/parser/jsonParser");
const LanguageHelper_1 = require("../../common/LanguageHelper");
const PathUtil_1 = require("../../common/PathUtil");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
const SchemaVersionAdapter_1 = require("../../tool/SchemaVersionAdapter");
const SchemaProvider_1 = require("../schema/SchemaProvider");
class I18nSignatureHelp {
    constructor(documentProvider) {
        this._documentProvider = documentProvider;
    }
    provideSignatureHelp(document, position) {
        return __awaiter(this, void 0, void 0, function* () {
            let offset = document.offsetAt(position);
            let jsonDocument = (0, jsonParser_1.parse)(document);
            let node = jsonDocument.getNodeFromOffset(offset);
            if (!node || LanguageHelper_1.LanguageHelper.isKey(node)) {
                return Promise.resolve(null);
            }
            let prefix = LanguageHelper_1.LanguageHelper.getI18nIndicatorPrefix(document, position);
            if (!prefix) {
                return Promise.resolve(null);
            }
            let result = { signatures: [], activeSignature: 0, activeParameter: 0 };
            let schemaVersion = yield SchemaVersionAdapter_1.SchemaVersionHelper.getApplicationSchemaVersion(document.uri);
            let i18nSignatures = yield this.getI18nSignatures(schemaVersion);
            if (prefix === '$(') {
                if (i18nSignatures) {
                    i18nSignatures.forEach(element => {
                        let signature = mdkLanguageTypes_1.SignatureInformation.create(element.Signature);
                        result.signatures.push(signature);
                    });
                    result.activeSignature = 0;
                    return Promise.resolve(result);
                }
            }
            let signature = null;
            let i18nSignature = this.getI18nSignature(i18nSignatures, prefix);
            if (!i18nSignature) {
                return Promise.resolve(null);
            }
            signature = mdkLanguageTypes_1.SignatureInformation.create(i18nSignature.Signature);
            let params = i18nSignature.Signature.slice(2, i18nSignature.Signature.lastIndexOf(')')).split(',');
            params.forEach(element => {
                signature.parameters.push({ label: element, documentation: '' });
            });
            result.signatures.push(signature);
            result.activeSignature = 0;
            result.activeParameter = Math.min(LanguageHelper_1.LanguageHelper.getNumOfCamma(prefix), result.signatures[0].parameters.length - 1);
            return Promise.resolve(result);
        });
    }
    getI18nSignatures(schemaVersion) {
        let signatureFilePath = PathUtil_1.PathUtil.getResFullPath(SchemaProvider_1.SchemaProvider.getInstance(schemaVersion).schemaVersion, "Signature.json");
        return this._documentProvider.getDocumentJson(signatureFilePath);
    }
    getI18nSignature(signatureList, i18nIndicatorPrefix) {
        let tokens = esprima.tokenize(i18nIndicatorPrefix, { loc: true, tolerant: true, tokens: true });
        if (tokens.length < 3) {
            return null;
        }
        let prefix = tokens[0].value + tokens[1].value + tokens[2].value + ",";
        return signatureList.find(signature => signature.Signature.startsWith(prefix));
    }
}
exports.I18nSignatureHelp = I18nSignatureHelp;
//# sourceMappingURL=I18nSignatureHelp.js.map