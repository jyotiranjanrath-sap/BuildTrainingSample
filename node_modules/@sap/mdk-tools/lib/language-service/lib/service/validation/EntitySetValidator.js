"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitySetValidator = void 0;
const LogUtil_1 = require("../../common/LogUtil");
const ODataMetadataProvider_1 = require("../../common/ODataMetadataProvider");
const PathUtil_1 = require("../../common/PathUtil");
const TargetHelper_1 = require("../../common/TargetHelper");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const MDKDefinitions_1 = require("../../export/MDKDefinitions");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
class EntitySetValidator {
    constructor(documentProvider) {
        if (!documentProvider) {
            LogUtil_1.Log.error("undefined documentProvider provided for EntitySetValidator.");
        }
        this._documentProvider = documentProvider;
        this._oDataMetadataProvider = new ODataMetadataProvider_1.ODataMetadataProvider(documentProvider);
        this._context = {};
    }
    isSupportDocument(document) {
        let fileType = PathUtil_1.PathUtil.getMDKFileType(document.uri);
        let match = [
            PathUtil_1.MDKFileType.Action,
            PathUtil_1.MDKFileType.Page
        ].some(eachType => eachType === fileType);
        if (match) {
            return /"EntitySet"|"ReadLink"/.test(document.getText());
        }
        return false;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = Object.assign({}, context);
        });
    }
    validateJsonDocument(document, jsonDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    checkJsonNodeSync(document, node) {
        return TargetHelper_1.TargetHelper.isEntitySetLiteralValueNode(node) ||
            TargetHelper_1.TargetHelper.isReadLinkEntityLiteralSetValue(node);
    }
    validateJsonNode(document, node, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            let diagnostics = [];
            let nodeRange = _getJSONNodeRange(document, node);
            if (TargetHelper_1.TargetHelper.isEntitySetLiteralValueNode(node)) {
                let entitySetName = node.value;
                if (!entitySetName) {
                    diagnostics.push(_buildEmptyEntitySetProblem(nodeRange));
                }
                else {
                    if (entitySetName !== 'ErrorArchive') {
                        let serviceReference = TargetHelper_1.TargetHelper.getTargetSiblingNodeValue(node, 'Service');
                        if (serviceReference) {
                            let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(document.uri, this._documentProvider, this._context[document.uri].referenceApps);
                            let serviceFullPath = yield baseAppDelegate.toFileFullPath(serviceReference);
                            let entities = yield this._oDataMetadataProvider.getEntities(serviceFullPath, document.uri);
                            entities = entities.filter(entity => {
                                return entity !== 'ErrorArchive';
                            });
                            if (entities && entities.length > 0) {
                                let existed = entities.indexOf(entitySetName) >= 0;
                                if (existed) {
                                    let properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityProperties(serviceFullPath, entitySetName, document.uri);
                                    properties = properties.filter(propName => !_isPredefinedProperty(propName));
                                    existed = properties.length > 0;
                                }
                                if (!existed) {
                                    diagnostics.push(_buildInvalidEntitySetProblem(entitySetName, nodeRange, serviceReference));
                                }
                            }
                        }
                    }
                }
            }
            else if (TargetHelper_1.TargetHelper.isReadLinkEntityLiteralSetValue(node)) {
                let entitySetName = TargetHelper_1.TargetHelper.getTargetSiblingNodeValue(node, 'EntitySet');
                let readLinkValue = node.value;
                if (readLinkValue) {
                    let regExp = new RegExp(`^(${entitySetName})\\(.*\\)$`);
                    if (!regExp.test(readLinkValue) && !new RegExp('^pending_[1-9][0-9]*$').test(readLinkValue)) {
                        diagnostics.push(_buildInvalidEntitySetReadLinkProblem(readLinkValue, nodeRange));
                    }
                }
            }
            diagnostics.forEach(item => item.source = MDKDefinitions_1.MDKValidator.EntitySet);
            return diagnostics;
        });
    }
    checkJsNodeSync(document, node) {
        return false;
    }
    validateJsNode(document, node, loc) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    cleanup(document, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = null;
            return diagnostics;
        });
    }
}
exports.EntitySetValidator = EntitySetValidator;
function _getJSONNodeRange(document, node) {
    return mdkLanguageTypes_1.Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
}
function _buildEmptyEntitySetProblem(range) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Empty EntitySet name", mdkLanguageTypes_1.DiagnosticSeverity.Error);
    problem.code = "EmptyEntitySet";
    return problem;
}
function _buildInvalidEntitySetProblem(name, range, service) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Can not find EntitySet name '" + name + "' in " + TargetHelper_1.TargetHelper.getServiceXmlReference(service) + ".", mdkLanguageTypes_1.DiagnosticSeverity.Error);
    problem.code = "InvalidEntitySet";
    return problem;
}
function _buildInvalidEntitySetReadLinkProblem(name, range) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Not recognized ReadLink value: '" + name + "'.", mdkLanguageTypes_1.DiagnosticSeverity.Error);
    problem.code = "InvalidEntitySetReadLink";
    return problem;
}
function _isPredefinedProperty(propName) {
    return propName.startsWith('@odata.');
}
//# sourceMappingURL=EntitySetValidator.js.map