"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameValidator = void 0;
const vscode_uri_1 = require("vscode-uri");
const cache_1 = require("../../cache");
const LanguageHelper_1 = require("../../common/LanguageHelper");
const LogUtil_1 = require("../../common/LogUtil");
const PathUtil_1 = require("../../common/PathUtil");
const MDKDefinitions_1 = require("../../export/MDKDefinitions");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
class NameValidator {
    constructor(documentProvider) {
        if (!documentProvider) {
            LogUtil_1.Log.error("undefined documentProvider provided for NameValidator.");
        }
        this._documentProvider = documentProvider;
        this._context = {};
    }
    isSupportDocument(document) {
        let fileType = PathUtil_1.PathUtil.getMDKFileType(document.uri);
        let match = [
            PathUtil_1.MDKFileType.Action,
            PathUtil_1.MDKFileType.Page
        ].some(eachType => eachType === fileType);
        if (match) {
            return /"_Name"/.test(document.getText());
        }
        return false;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = Object.assign({}, context);
            if (_isPageDocument(document)) {
                let allOtherPageNames = [];
                let mdkPages = yield cache_1.cache.getPages(document.uri, this._documentProvider);
                if (!mdkPages) {
                    mdkPages = yield LanguageHelper_1.LanguageHelper.getAllPages(document.uri, this._documentProvider);
                }
                if (mdkPages) {
                    let docPath = vscode_uri_1.default.parse(document.uri).fsPath;
                    mdkPages.forEach(mdkPage => {
                        if (mdkPage && mdkPage.definition && mdkPage.definition['_Name'] &&
                            vscode_uri_1.default.file(mdkPage.fullPath).fsPath !== docPath) {
                            allOtherPageNames.push(mdkPage.definition['_Name']);
                        }
                    });
                }
                this._context[document.uri]['allOtherPageNames'] = allOtherPageNames;
            }
        });
    }
    validateJsonDocument(document, jsonDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            if (_isPageDocument(document)) {
                let allControlNames = [];
                jsonDocument.visit(node => {
                    if (_isControlNameValueNode(node)) {
                        allControlNames.push(node.value);
                    }
                    return true;
                });
                this._context[document.uri]['allControlNames'] = allControlNames;
            }
            return [];
        });
    }
    checkJsonNodeSync(document, node) {
        return _isNameValueNode(node);
    }
    validateJsonNode(document, node, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            let diagnostics = [];
            if (_isPageDocument(document)) {
                if (_isPageNameValueNode(node)) {
                    let range = _getJSONNodeRange(document, node);
                    let pageName = node.value;
                    if (!pageName) {
                        diagnostics.push(_buildEmptyNameProblem(range));
                    }
                    else if (pageName.indexOf(' ') >= 0) {
                        diagnostics.push(_buildInvalidNameProblem(pageName, range));
                    }
                    else if (!_isUniquePageName(pageName, this._getAllOtherPageNames(document))) {
                        diagnostics.push(_buildNotUniquePageNameProblem(pageName, range));
                    }
                }
                else if (_isControlNameValueNode(node)) {
                    let range = _getJSONNodeRange(document, node);
                    let controlName = node.value;
                    if (!controlName) {
                        diagnostics.push(_buildEmptyNameProblem(range));
                        // } else if (controlName.indexOf(' ') >= 0) {
                        // diagnostics.push(_buildInvalidNameProblem(controlName, range));
                    }
                    else if (!_isUniqueControlName(controlName, this._getAllControlNames(document))) {
                        diagnostics.push(_buildNotUniqueControlNameProblem(controlName, range));
                    }
                }
            }
            else if (_isActionDocument(document)) {
                if (_isActionResultNameValueNode(node)) {
                    let range = _getJSONNodeRange(document, node);
                    let actionResultName = node.value;
                    if (!actionResultName) {
                        diagnostics.push(_buildEmptyNameProblem(range));
                    }
                    else if (actionResultName.indexOf(' ') >= 0) {
                        diagnostics.push(_buildInvalidNameProblem(actionResultName, range));
                    }
                }
            }
            diagnostics.forEach(item => item.source = MDKDefinitions_1.MDKValidator.Name);
            return diagnostics;
        });
    }
    checkJsNodeSync(document, node) {
        return false;
    }
    validateJsNode(document, node, loc) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    cleanup(document, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = null;
            return diagnostics;
        });
    }
    _getAllOtherPageNames(document) {
        if (this._context && this._context[document.uri]) {
            return this._context[document.uri]['allOtherPageNames'] || [];
        }
        else {
            return [];
        }
    }
    _getAllControlNames(document) {
        if (this._context && this._context[document.uri]) {
            return this._context[document.uri]['allControlNames'] || [];
        }
        else {
            return [];
        }
    }
}
exports.NameValidator = NameValidator;
function _getJSONNodeRange(document, node) {
    return mdkLanguageTypes_1.Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
}
function _isPageDocument(document) {
    return (document && PathUtil_1.PathUtil.getMDKFileType(document.uri) === PathUtil_1.MDKFileType.Page);
}
function _isActionDocument(document) {
    return (document && PathUtil_1.PathUtil.getMDKFileType(document.uri) === PathUtil_1.MDKFileType.Action);
}
function _isPageNameValueNode(node) {
    if (!_isNameValueNode(node)) {
        return false;
    }
    return !node.parent.parent.parent;
}
function _isControlNameValueNode(node) {
    if (!_isNameValueNode(node)) {
        return false;
    }
    return !!node.parent.parent.parent;
}
function _isActionResultNameValueNode(node) {
    if (!_isNameValueNode(node)) {
        return false;
    }
    let checkingNode = node.parent.parent.parent;
    return checkingNode && checkingNode.keyNode && checkingNode.keyNode.value === "ActionResult";
}
function _isNameValueNode(node) {
    return (node && node.parent && node.parent.keyNode &&
        node.parent.keyNode.value === '_Name' &&
        node.parent.valueNode === node);
}
function _isUniquePageName(pageName, allOtherPageNames) {
    return allOtherPageNames.indexOf(pageName) < 0;
}
function _isUniqueControlName(controlName, allControlNames) {
    let count = 0;
    if (allControlNames) {
        for (let i = 0; i < allControlNames.length; i++) {
            if (controlName === allControlNames[i]) {
                count++;
                if (count > 1) {
                    break;
                }
            }
        }
    }
    return (count < 2);
}
function _buildEmptyNameProblem(range) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Empty name", mdkLanguageTypes_1.DiagnosticSeverity.Error);
    problem.code = "EmptyName";
    return problem;
}
function _buildInvalidNameProblem(name, range) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Invalid name: " + name, mdkLanguageTypes_1.DiagnosticSeverity.Error);
    problem.code = "InvalidName";
    return problem;
}
function _buildNotUniquePageNameProblem(pageName, range) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Not unique page name: " + pageName, mdkLanguageTypes_1.DiagnosticSeverity.Warning);
    problem.code = "NotUniquePageName";
    return problem;
}
function _buildNotUniqueControlNameProblem(controlName, range) {
    let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Not unique control name: " + controlName, mdkLanguageTypes_1.DiagnosticSeverity.Error);
    problem.code = "NotUniqueControlName";
    return problem;
}
//# sourceMappingURL=NameValidator.js.map