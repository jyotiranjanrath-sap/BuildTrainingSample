"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryOptionValidator = void 0;
const LanguageHelper_1 = require("../../common/LanguageHelper");
const LogUtil_1 = require("../../common/LogUtil");
const ODataMetadataProvider_1 = require("../../common/ODataMetadataProvider");
const PathUtil_1 = require("../../common/PathUtil");
const MDKApplicationDelegate_1 = require("../../export/MDKApplicationDelegate");
const MDKDefinitions_1 = require("../../export/MDKDefinitions");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
class QueryOptionValidator {
    constructor(documentProvider) {
        if (!documentProvider) {
            LogUtil_1.Log.error("undefined documentProvider provided for QueryOptionValidator.");
        }
        this._documentProvider = documentProvider;
        this._context = {};
    }
    isSupportDocument(document) {
        let fileType = PathUtil_1.PathUtil.getMDKFileType(document.uri);
        let match = [
            PathUtil_1.MDKFileType.Action,
            PathUtil_1.MDKFileType.Page
        ].some(eachType => eachType === fileType);
        if (match) {
            return /"QueryOptions"/.test(document.getText());
        }
        return false;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = Object.assign({}, context);
        });
    }
    validateJsonDocument(document, jsonDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    checkJsonNodeSync(document, node) {
        return this._needValidation(node);
    }
    validateJsonNode(document, node, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            return this._validateJsonNodeQueryOption(document, node, schema);
        });
    }
    checkJsNodeSync(document, node) {
        return false;
    }
    validateJsNode(document, node, loc) {
        return __awaiter(this, void 0, void 0, function* () {
            // tbd
            return [];
        });
    }
    cleanup(document, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = null;
            return diagnostics;
        });
    }
    _validateJsonNodeQueryOption(document, node, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let parser = require('../../common/QueryOptionParser');
            try {
                // let ast = parser.parse(node.value, {startRule:'QueryOptions'});
                let option = { ast: {} };
                let ast = parser.parse(node.value, option);
                let tmpResult = yield this._validate(ast, node, document);
                result.push(...tmpResult);
            }
            catch (e) {
                let diagnostic = this._convertErrorToDiagnostic(e, document, node);
                if (diagnostic) {
                    result.push(diagnostic);
                }
            }
            result.forEach(item => item.source = MDKDefinitions_1.MDKValidator.QueryOption);
            return result;
        });
    }
    _convertErrorToDiagnostic(error, document, node) {
        let errorMessage = error.message;
        LogUtil_1.Log.error(`Error while parsing ${node.value} : ${errorMessage}`);
        let range;
        if (error.location) {
            range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset + error.location.start.offset + 1), document.positionAt(node.offset + error.location.end.offset + 1));
        }
        else if (error.offset) {
            range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset + 1 + error.offset), document.positionAt(node.offset + 1 + error.offset));
        }
        else {
            range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + node.length));
        }
        return {
            range: range,
            severity: mdkLanguageTypes_1.DiagnosticSeverity.Error,
            message: errorMessage
        };
    }
    _needValidation(node) {
        return node.type === 'string' && !node.value.startsWith('/') && node.value !== '' && LanguageHelper_1.LanguageHelper.isQueryOptionProperty(node);
    }
    _validate(ast, node, document) {
        return __awaiter(this, void 0, void 0, function* () {
            let result = [];
            let target = LanguageHelper_1.LanguageHelper.getTargetObject(node);
            if (target && target.Service && target.EntitySet) {
                let baseAppDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(document.uri, this._documentProvider, this._context[document.uri].referenceApps);
                let serviceFullPath = yield baseAppDelegate.toFileFullPath(target.Service);
                let properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityProperties(serviceFullPath, target.EntitySet, document.uri);
                if (properties && properties.length > 1) {
                    if (ast.$expand) {
                        yield Promise.all(ast.$expand.map((property) => __awaiter(this, void 0, void 0, function* () {
                            yield this._validateProperty(property, target.EntitySet, serviceFullPath, node, document, result, true);
                        })));
                    }
                    if (ast.$filter) {
                        yield this._validateFilter(ast.$filter, target.EntitySet, serviceFullPath, node, document, result);
                    }
                    if (ast.$select) {
                        yield Promise.all(ast.$select.map((property) => __awaiter(this, void 0, void 0, function* () {
                            yield this._validateProperty(property, target.EntitySet, serviceFullPath, node, document, result);
                        })));
                    }
                    if (ast.$orderby) {
                        yield Promise.all(ast.$orderby.map((property) => __awaiter(this, void 0, void 0, function* () {
                            let propertyName = Object.keys(property)[0];
                            yield this._validateProperty(propertyName, target.EntitySet, serviceFullPath, node, document, result);
                        })));
                    }
                }
            }
            return result;
        });
    }
    _validateProperty(p, entityType, serviceFullPath, node, document, errors, bNavigationProperty, propertyValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!p) {
                return;
            }
            if (entityType && (entityType.endsWith('.js') || entityType.startsWith('{{')) && p.indexOf('@odata') === -1) {
                return;
            }
            if (serviceFullPath && entityType) {
                let properties;
                if (bNavigationProperty) {
                    properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getNavigationEntityProperties(serviceFullPath, entityType, document.uri);
                }
                else {
                    properties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityProperties(serviceFullPath, entityType, document.uri);
                }
                if (properties && properties.length > 0) {
                    if (!p.startsWith('@')) {
                        properties = properties.filter(property => {
                            return !property.startsWith('@');
                        });
                    }
                    if (properties.length === 0) {
                        return;
                    }
                    let propertyName;
                    let remainingPropertyName;
                    let slashPos = p.indexOf('/');
                    if (slashPos >= 0) {
                        propertyName = p.slice(0, slashPos);
                        remainingPropertyName = p.slice(slashPos + 1);
                    }
                    else {
                        propertyName = p;
                    }
                    let result = properties.find(property => propertyName === property);
                    if (!result) {
                        let errorMessage = `Can't find property ${propertyName}`;
                        if (bNavigationProperty) {
                            errorMessage = `Can't find navigation property ${propertyName}`;
                        }
                        let range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + 1 + node.value.length));
                        errors.push({
                            range: range,
                            severity: mdkLanguageTypes_1.DiagnosticSeverity.Error,
                            message: errorMessage
                        });
                        return;
                    }
                    let type = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityByNavigationProperty(serviceFullPath, entityType, propertyName, document.uri);
                    if (remainingPropertyName) {
                        if (!type) {
                            let errorMessage = `${propertyName} in ${p} should be a navigation property`;
                            let range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + 1 + node.value.length));
                            errors.push({
                                range: range,
                                severity: mdkLanguageTypes_1.DiagnosticSeverity.Error,
                                message: errorMessage
                            });
                            return;
                        }
                        return yield this._validateProperty(remainingPropertyName, type, serviceFullPath, node, document, errors, bNavigationProperty);
                    }
                    if (propertyValue) {
                        let detailedProperties = yield ODataMetadataProvider_1.ODataMetadataProvider.instance.getEntityPropertiesWithDetail(serviceFullPath, entityType, document.uri);
                        let detailedProperty = detailedProperties.find(property => propertyName === property.name);
                        let bTypeMatch = true;
                        if (propertyValue.type && propertyValue.type !== 'string' && detailedProperty.type === 'Edm.String') {
                            bTypeMatch = false;
                        }
                        if (!bTypeMatch) {
                            let errorMessage = `Value of ${propertyName} should be of type ${detailedProperty.type}`;
                            let range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset + 1), document.positionAt(node.offset + 1 + node.value.length));
                            errors.push({
                                range: range,
                                severity: mdkLanguageTypes_1.DiagnosticSeverity.Error,
                                message: errorMessage
                            });
                            return;
                        }
                    }
                    return type;
                }
            }
        });
    }
    _validateFilter(filter, entityType, serviceFullPath, node, document, errors) {
        return __awaiter(this, void 0, void 0, function* () {
            if (filter.left) {
                yield this._validateObj(filter.left, entityType, serviceFullPath, node, document, errors);
                if (filter.right) {
                    yield this._validateObj(filter.right, entityType, serviceFullPath, node, document, errors);
                }
            }
            else if (filter.lambda) {
                yield this._validateLambda(filter.lambda, entityType, serviceFullPath, node, document, errors);
            }
        });
    }
    _validateObj(obj, entityType, serviceFullPath, node, document, errors, bHasPrefix) {
        return __awaiter(this, void 0, void 0, function* () {
            if (obj.type === 'literal') {
                return;
            }
            let that = this;
            let bCondition = ["eq", "ne", "lt", "le", "gt", "ge", "add", "sub", "mul", "div", "mod"].some(item => item === obj.type);
            if (bCondition) {
                let propertyName;
                if (obj.left.type === 'property') {
                    propertyName = obj.left.name;
                    if (bHasPrefix) {
                        let slashPos = propertyName.indexOf('/');
                        if (slashPos >= 0) {
                            propertyName = propertyName.slice(slashPos + 1);
                        }
                    }
                    let value;
                    if (obj.right.type === 'literal') {
                        value = obj.right.value;
                    }
                    yield that._validateProperty(propertyName, entityType, serviceFullPath, node, document, errors, false, value);
                }
                else if (obj.right.type === 'property') {
                    propertyName = obj.right.name;
                    if (bHasPrefix) {
                        let slashPos = propertyName.indexOf('/');
                        if (slashPos >= 0) {
                            propertyName = propertyName.slice(slashPos + 1);
                        }
                    }
                    let value;
                    if (obj.left.type === 'literal') {
                        value = obj.left.value;
                    }
                    yield that._validateProperty(propertyName, entityType, serviceFullPath, node, document, errors, false, value);
                }
                return;
            }
            for (let key in obj) {
                if (obj.hasOwnProperty(key)) {
                    let value = obj[key];
                    if (key === 'lambda') {
                        yield that._validateLambda(value, entityType, serviceFullPath, node, document, errors);
                    }
                    else if (key === 'type' && value === 'property' && obj.name) {
                        let propertyName = obj.name;
                        if (bHasPrefix) {
                            let slashPos = propertyName.indexOf('/');
                            if (slashPos >= 0) {
                                propertyName = propertyName.slice(slashPos + 1);
                            }
                        }
                        yield that._validateProperty(propertyName, entityType, serviceFullPath, node, document, errors);
                    }
                    else if (typeof value === "object") {
                        yield that._validateObj(value, entityType, serviceFullPath, node, document, errors, bHasPrefix);
                    }
                }
            }
        });
    }
    _validateLambda(lambda, entityType, serviceFullPath, node, document, errors) {
        return __awaiter(this, void 0, void 0, function* () {
            let that = this;
            let entitySet = yield that._validateProperty(lambda.name, entityType, serviceFullPath, node, document, errors);
            yield that._validateObj(lambda.lambdaExpr, entitySet, serviceFullPath, node, document, errors, true);
        });
    }
}
exports.QueryOptionValidator = QueryOptionValidator;
//# sourceMappingURL=QueryOptionValidator.js.map