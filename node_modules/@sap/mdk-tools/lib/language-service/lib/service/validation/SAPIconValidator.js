"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SAPIconValidator = void 0;
const LanguageHelper_1 = require("../../common/LanguageHelper");
const PathUtil_1 = require("../../common/PathUtil");
const RuleHelper_1 = require("../../common/RuleHelper");
const SAPIconMap_1 = require("../../common/SAPIconMap");
const MDKDefinitions_1 = require("../../export/MDKDefinitions");
const mdkLanguageTypes_1 = require("../../mdkLanguageTypes");
const sapIconPrefix = "sap-icon://";
class SAPIconValidator {
    constructor() {
        this._context = {};
    }
    isSupportDocument(document) {
        let fileType = PathUtil_1.PathUtil.getMDKFileType(document.uri);
        let match = [
            PathUtil_1.MDKFileType.Action,
            PathUtil_1.MDKFileType.Page,
            PathUtil_1.MDKFileType.Rule,
            PathUtil_1.MDKFileType.Fragment
        ].some(eachType => eachType === fileType);
        if (match) {
            return /sap-icon:\/\//.test(document.getText());
        }
        return false;
    }
    setup(document, context) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = Object.assign({}, context);
            if (!this.sapIcons || this.sapIcons.length === 0) {
                this.sapIcons = Object.keys(SAPIconMap_1.SAPIconMap).filter(value => !(parseInt(value) >= 0));
            }
        });
    }
    validateJsonDocument(document, jsonDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
    checkJsonNodeSync(document, node) {
        if (node && node.type === 'string' && !LanguageHelper_1.LanguageHelper.isKey(node) && node.value && node.value.startsWith(sapIconPrefix)) {
            return true;
        }
        return false;
    }
    validateJsonNode(document, node, schema) {
        return __awaiter(this, void 0, void 0, function* () {
            if (node.value.startsWith(sapIconPrefix)) {
                let range = mdkLanguageTypes_1.Range.create(document.positionAt(node.offset), document.positionAt(node.offset + node.length));
                return this._validateSAPIcon(node.value, range);
            }
            return [];
        });
    }
    checkJsNodeSync(document, node) {
        return node && node.type === "Literal" && node.value && node.value.startsWith(sapIconPrefix);
    }
    validateJsNode(document, node, loc) {
        return __awaiter(this, void 0, void 0, function* () {
            if (node.type === "Literal" && node.value.startsWith(sapIconPrefix)) {
                let range = RuleHelper_1.RuleHelper.getRangeFromEsprimaLocation(node.loc);
                return this._validateSAPIcon(node.value, range);
            }
            return [];
        });
    }
    cleanup(document, diagnostics) {
        return __awaiter(this, void 0, void 0, function* () {
            this._context[document.uri] = null;
            return diagnostics;
        });
    }
    _validateSAPIcon(value, range) {
        let diagnostics = [];
        let iconStr = value.slice(sapIconPrefix.length);
        if (this.sapIcons.indexOf(iconStr) < 0) {
            let problem = mdkLanguageTypes_1.Diagnostic.create(range, "Invalid SAPIcon value: '" + value + "'.", mdkLanguageTypes_1.DiagnosticSeverity.Warning);
            problem.code = "InvalidSAPIcon";
            problem.source = MDKDefinitions_1.MDKValidator.SAPIcon;
            diagnostics.push(problem);
        }
        return diagnostics;
    }
}
exports.SAPIconValidator = SAPIconValidator;
//# sourceMappingURL=SAPIconValidator.js.map