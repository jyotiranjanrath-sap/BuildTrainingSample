"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticFormatter = exports.DiagnosticInfo = void 0;
const vscode_uri_1 = require("vscode-uri");
const mdkLanguageTypes_1 = require("../mdkLanguageTypes");
class DiagnosticInfo {
    constructor(diagnostic, uri) {
        this.diagnostic = diagnostic;
        this.uri = uri;
    }
}
exports.DiagnosticInfo = DiagnosticInfo;
class DiagnosticFormatter {
    write(diagnosticInfo) {
        let content = '[MDK] ';
        let diagnostic = diagnosticInfo.diagnostic;
        content += this.toString(diagnostic.severity) + ': ';
        content += diagnostic.message;
        content += ' at [(' + diagnostic.range.start.line + ',' + diagnostic.range.start.character + '), (';
        content += diagnostic.range.end.line + ',' + diagnostic.range.end.character + ')]';
        content += ' in ' + diagnosticInfo.uri;
        return content;
    }
    read(content) {
        if (content && content.length > 0) {
            let start = 6; // 6 is the length of '[MDK] '
            let end = content.indexOf(': ', start);
            let severity = this.fromString(content.substring(start, end));
            start = end + 2; // 2 is the length of ': '
            end = content.indexOf(' at [(', start);
            let message = content.substring(start, end);
            start = end + 6; // 6 is the length of ' at [('
            end = content.indexOf(',', start);
            let line = +content.substring(start, end);
            start = end + 1; // 1 is the length of ','
            end = content.indexOf('), (', start);
            let character = +content.substring(start, end);
            let rangeStart = mdkLanguageTypes_1.Position.create(line, character);
            start = end + 4; // 4 is the length of '), ('
            end = content.indexOf(',', start);
            line = +content.substring(start, end);
            start = end + 1; // 1 is the length of ','
            end = content.indexOf(')]', start);
            character = +content.substring(start, end);
            let rangeEnd = mdkLanguageTypes_1.Position.create(line, character);
            let range = mdkLanguageTypes_1.Range.create(rangeStart, rangeEnd);
            start = end + 6; // 6 is the length of ')]' and ' in '
            let uri = content.substring(start);
            let diagnostic = mdkLanguageTypes_1.Diagnostic.create(range, message, severity);
            return new DiagnosticInfo(diagnostic, uri);
        }
    }
    toUriFsPath(path) {
        return vscode_uri_1.default.file(path).fsPath;
    }
    toString(severity) {
        if (severity) {
            switch (severity) {
                case 1:
                    return 'Error';
                case 2:
                    return 'Warning';
                case 3:
                    return 'Information';
                case 4:
                    return 'Hint';
            }
        }
        return 'Unkown';
    }
    fromString(severity) {
        if (severity) {
            switch (severity) {
                case 'Error':
                    return mdkLanguageTypes_1.DiagnosticSeverity.Error;
                case 'Warning':
                    return mdkLanguageTypes_1.DiagnosticSeverity.Warning;
                case 'Information':
                    return mdkLanguageTypes_1.DiagnosticSeverity.Information;
                case 'Hint':
                    return mdkLanguageTypes_1.DiagnosticSeverity.Hint;
            }
        }
    }
}
exports.DiagnosticFormatter = DiagnosticFormatter;
//# sourceMappingURL=DiagnosticFormatter.js.map