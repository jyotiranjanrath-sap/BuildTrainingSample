"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.completion = exports.validation = exports.SchemaVersionHelper = void 0;
const vscode_uri_1 = require("vscode-uri");
const MDKApplicationDelegate_1 = require("../export/MDKApplicationDelegate");
const MDKDocumentProvider_1 = require("../export/MDKDocumentProvider");
const SchemaProvider_1 = require("../service/schema/SchemaProvider");
class SchemaVersionHelper {
    static getConfiguration() {
        return this.schemaVersionConfig;
    }
    static getApplicationSchemaVersion(anchorDocumentFullPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let documentProvider = new MDKDocumentProvider_1.MDKFileSystemDocumentProvider();
            let appDelegate = new MDKApplicationDelegate_1.MDKApplicationDelegate(anchorDocumentFullPath, documentProvider);
            let oAppInfo = yield appDelegate.getApplicationInfo();
            if (oAppInfo && oAppInfo.jsonData && oAppInfo.jsonData["_SchemaVersion"]) {
                return oAppInfo.jsonData["_SchemaVersion"];
            }
            return "5.2"; // default _SchemaVersion
        });
    }
    static init(anchorDocumentFullPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let _path = vscode_uri_1.default.file(anchorDocumentFullPath).fsPath;
            let sSchemaVersion = yield SchemaVersionHelper.getApplicationSchemaVersion(_path);
            let oSchemaProvider = SchemaProvider_1.SchemaProvider.getInstance(sSchemaVersion);
            this.currentSchemaVersion = sSchemaVersion || oSchemaProvider.schemaVersion;
            if (!this.schemaVersionConfig) {
                this.schemaVersionConfig = {
                    "pageSegmentsForTargetPath": [
                        { "value": "-Previous" },
                        { "value": "-Current", "version": "^5.1" }
                    ]
                };
            }
        });
    }
    static isMatch(version) {
        if (!version) {
            return true;
        }
        if (this.currentSchemaVersion) {
            if (Array.isArray(version)) {
                return version.find(item => item === this.currentSchemaVersion);
            }
            else if (typeof version === "string") {
                if (version.startsWith("^")) {
                    version = version.substring(1);
                    let floatSource = parseFloat(version);
                    let floatSchemaVersion = parseFloat(this.currentSchemaVersion);
                    if (!isNaN(floatSource) && !isNaN(floatSchemaVersion)) {
                        return floatSchemaVersion > floatSource;
                    }
                    return this.currentSchemaVersion > version;
                }
                return this.currentSchemaVersion === version;
            }
        }
        return false;
    }
}
exports.SchemaVersionHelper = SchemaVersionHelper;
var validation;
(function (validation) {
    function resolvePageSegment(pageName, host) {
        let oSchemaVersionConfig = SchemaVersionHelper.getConfiguration();
        let page = null;
        let bMatch = true;
        if (oSchemaVersionConfig && oSchemaVersionConfig.pageSegmentsForTargetPath) {
            let oConfig = oSchemaVersionConfig.pageSegmentsForTargetPath.find(item => {
                return item.value === pageName;
            });
            if (oConfig) {
                bMatch = SchemaVersionHelper.isMatch(oConfig.version);
            }
        }
        if (bMatch && pageName === '-Previous') {
            page = host.findPreviousPage();
        }
        else if (bMatch && pageName === '-Current') {
            page = host.findCurrentPage();
        }
        else {
            page = host.findPageByName(pageName);
        }
        return page;
    }
    validation.resolvePageSegment = resolvePageSegment;
})(validation = exports.validation || (exports.validation = {}));
var completion;
(function (completion) {
    function getTargetPathPageNames() {
        let result = [];
        let oSchemaVersionConfig = SchemaVersionHelper.getConfiguration();
        if (oSchemaVersionConfig && oSchemaVersionConfig.pageSegmentsForTargetPath) {
            oSchemaVersionConfig.pageSegmentsForTargetPath.forEach(item => {
                if (SchemaVersionHelper.isMatch(item.version)) {
                    result.push({ label: item.value });
                }
            });
        }
        else {
            // compatiable with the old version.
            // the old version may not have the configuration
            result.push({ label: "-Previous" });
        }
        return result;
    }
    completion.getTargetPathPageNames = getTargetPathPageNames;
})(completion = exports.completion || (exports.completion = {}));
//# sourceMappingURL=SchemaVersionAdapter.js.map