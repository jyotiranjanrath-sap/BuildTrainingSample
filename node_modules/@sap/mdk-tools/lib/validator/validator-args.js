const commandLineArgs = require('command-line-args');
const path = require('path');
const fs = require('fs-extra');
const process = require('process');
const logger = require('../logger');
const LogLevel = require('../language-service/lib/mdkLanguageTypes').LogLevel;

const optionDefinitions = [
	{ name: 'project', type: String, multiple: false },
	{ name: 'cim-apps', type: String, multiple: false },
	{ name: 'sdk-version', type: String, multiple: false },
	{ name: 'platform', type: String, multiple: false },
	{ name: 'reference-applications', type: String, multiple: false },
	{ name: 'log-file', type: String, multiple: false },
    { name: 'log-level', type: Number, multiple: false, defaultValue: 3 },
	{ name: 'allAppFullPaths', type: String, multiple: false }
];

let options = commandLineArgs(optionDefinitions);

function getProjectFolder() {
    if (options['project']) {
        let fullPath = path.resolve(options['project']);
        if (fs.existsSync(fullPath)) {
            return fullPath;
        } else {
            console.error(`failed to find path ${fullPath}`);
            process.exit(-1);
        }

    } else {
        return process.cwd();
    }
}

function processArguments() {
    function getMissingRequiredArgumentMessage() {
        if (!options['project']) {
            return logger.getError('Missing project options');
        }

        return null;
    }

    const missingArgumentMessage = getMissingRequiredArgumentMessage();
    if (missingArgumentMessage) {
        console.error(missingArgumentMessage);
    }
    if (missingArgumentMessage) {//|| options.help
        const getUsage = require('command-line-usage');

        const sections = [
            {
                header: 'Validate MDK application',
                content: 'Validate MDK application'
            },
            {
                header: 'Options',
                optionList: [
                    {
                        name: 'project',
                        typeLabel: '{underline folder}',
                        description: 'The location of the mdk project.'
                    },
                    {
                        name: 'cim-apps',
                        typeLabel: '',
                        description: 'cim apps path separated by \';\'.'
                    },
                    {
                        name: 'sdk-version',
                        typeLabel: '',
                        description: 'The SDK version that application is designed to run on.'
                    },
                    {
                        name: 'platform',
                        typeLabel: '',
                        description: 'The platform that application is designed to run on. These values are acceptable: iOS & Android & Web, iOS & Android, iOS, Android, Web, None.'
                    },
                    {
                        name: 'reference-applications',
                        typeLabel: '',
                        description: 'The reference array to other dependent applications.'
                    },
                    {
                        name: 'log-file',
                        typeLabel: '{underline file}',
                        description: 'Output the logs to a file.'
                    },
                    {
                        name: 'log-level',
                        typeLabel: 'Number',
                        description: 'Log level: Debug = 0, Info = 1, Warn = 2, Error = 3. Default is 3.'
                    },
                    {
                        name: 'allAppFullPaths',
                        typeLabel: '',
                        description: ''
                    }
                ]
            }
        ]
        const usage = getUsage(sections);
        console.log(usage);
        process.exit(-1);
    }
}

exports.project = function () {
    return getProjectFolder();
}

exports.cimApps = function () {
    return options['cim-apps'];
}

exports.sdkVersion = function () {
    return options['sdk-version'];
}

exports.platform = function () {
    return options['platform'];
}

exports.referenceApplications = function () {
    return options['reference-applications'];
}

exports.allAppFullPaths = function () {
    return options['allAppFullPaths'];
}

exports.logFile = function () {
    if (options['log-file']) {
        return path.resolve(options['log-file']);
    }
    return "";
}

exports.logLevel = function () {
    let _logLevel = options['log-level'];
    if (_logLevel && LogLevel[_logLevel]) {
        return _logLevel;
    } else {
        return LogLevel.Error;
    }
}

processArguments();